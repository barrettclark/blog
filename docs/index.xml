<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com</link>
    <description>Latest content from Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mperham@gmail.com (Mike Perham)</managingEditor>
    <webMaster>mperham@gmail.com (Mike Perham)</webMaster>
    <lastBuildDate>Wed, 08 Jan 2020 09:16:51 -0800</lastBuildDate>
    <atom:link href="https://www.mikeperham.com/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Faktory Enterprise</title>
      <link>https://www.mikeperham.com/2020/01/08/faktory-enterprise/</link>
      <pubDate>Wed, 08 Jan 2020 09:16:51 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2020/01/08/faktory-enterprise/</guid>
      <description>

&lt;p&gt;The best way to kick off 2020 is by shipping something massive for me: &lt;strong&gt;Faktory
Enterprise&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://contribsys.com/faktory&#34;&gt;Faktory&lt;/a&gt; is an open source, language-independent background job system.
If you want to scale your business app to many millions of transactions per day, background jobs are the best way to do it.
&lt;a href=&#34;https://www.celeryproject.org&#34;&gt;Celery&lt;/a&gt;, &lt;a href=&#34;https://github.com/OptimalBits/bull&#34;&gt;Bull&lt;/a&gt;, &lt;a href=&#34;https://sidekiq.org&#34;&gt;Sidekiq&lt;/a&gt; are all popular but they are
limited to the one language they are written in (Python, JS and Ruby
respectively).
Faktory&#39;s advantage is that you can use it with &lt;strong&gt;any&lt;/strong&gt; programming language; it makes a large, consistent feature set available to all of those languages.&lt;/p&gt;

&lt;h2 id=&#34;what-s-faktory-enterprise&#34;&gt;What&#39;s Faktory Enterprise?&lt;/h2&gt;

&lt;p&gt;Faktory Enterprise is the most feature-rich version of the Faktory job system available.
If you agree with my statements above and want the best job system for your company and team, you want Faktory Enterprise.
I&#39;m launching it with two major features.&lt;/p&gt;

&lt;h2 id=&#34;queue-throttling&#34;&gt;Queue Throttling&lt;/h2&gt;

&lt;p&gt;This is, without a doubt, the #1 missing feature requested by Sidekiq customers.
&amp;quot;We want to resize 100,000 images but processing those jobs at
full blast will crush our servers. How can we throttle those jobs so
that our workers keep some threads available for other, more critical queues?&amp;quot;.&lt;/p&gt;

&lt;p&gt;Easy, &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Ent-Throttling#use-cases&#34;&gt;queue throtting&lt;/a&gt; couldn&#39;t be simpler to configure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;throttles&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;bulk&lt;/span&gt; = &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Throw those 100,000 jobs into a &lt;code&gt;bulk&lt;/code&gt; queue.  That config says that
each worker process may only process 5 jobs from &lt;code&gt;bulk&lt;/code&gt; at a time.
If each worker process has 15 threads, you&#39;ll have 10 threads left to
process other queues.
Of course it comes with a handy Web UI for monitoring:&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;queue throttle ui&#34; src=&#34;https://raw.githubusercontent.com/contribsys/faktory/master/example/webui-throttle.png&#34; width=&#34;100%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;I&#39;ve never built this feature in Sidekiq for a number of reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sidekiq workers talk directly to Redis.&lt;/li&gt;
&lt;li&gt;It makes the job fetch logic much more complex.&lt;/li&gt;
&lt;li&gt;It conflicts with Sidekiq Pro&#39;s reliable fetch.&lt;/li&gt;
&lt;li&gt;It requires Lua.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Faktory doesn&#39;t have this same problem because of its different
architecture: Faktory workers talk directly to Faktory, not Redis so (1)
is not true.  I can implement most of the logic within Faktory and keep
the Redis Lua logic to a minimum (this is really important to minimize
latency since Redis is single threaded). &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Ent-Throttling&#34;&gt;Read more about throttling
here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;batches&#34;&gt;Batches&lt;/h2&gt;

&lt;p&gt;Batches continue to be my favorite feature of all time and the one I am
most proud of.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can I run 1,000 jobs and be notified when all are done?&lt;/li&gt;
&lt;li&gt;How can I parallelize processing a 10,000 row spreadsheet and then kick
off more jobs when that work is done?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A background job is a unit of work for your organization.
Batches allow you to compose more complex, nested workflows of jobs.
Here&#39;s an example defining a batch with several ImageJobs and a success
callback; that callback will execute only once all three ImageJobs have finished
successfully.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Faktory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ImagesComplete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s
b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;ImageJob&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;ImageJob&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;ImageJob&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that a callback is a background job like everything else.
Of course it comes with a handy Web UI for monitoring but a screenshot is AWOL.
&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Ent-Batches&#34;&gt;Read more about batches here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;docker-repository&#34;&gt;Docker Repository&lt;/h2&gt;

&lt;p&gt;Most of my customers are running Docker so I&#39;ve joined the hype. The
commercial versions of Faktory now have a private Docker repository so you can
download and run Faktory directly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker login docker.contribsys.com
Username:
Password:
$ docker pull docker.contribsys.com/contribsys/faktory-ent:1.2.0
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/contribsys/faktory/wiki&#34;&gt;Faktory wiki&lt;/a&gt; contains full installation details.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&#39;s it! Those features took me many months of full-time work to
implement. They are some of the most involved code I&#39;ve ever written but
I hope they turn out to be useful and easy to use for customers.&lt;/p&gt;

&lt;p&gt;I&#39;m excited because I already have two customers migrating
their existing job systems to Faktory Enterprise because of queue
throttling and polyglot support.&lt;/p&gt;

&lt;p&gt;And that&#39;s the value: all features are useable by jobs and workers written in any programming language.
Want to batch jobs written in Rust and Python? Sure!
Want to scale and throttle your Erlang and Go worker queues differently? Why not!&lt;/p&gt;

&lt;p&gt;Got questions, requests? Ping me at &lt;a href=&#34;https://twitter.com/getajobmike&#34;&gt;@getajobmike&lt;/a&gt; or mike@contribsys.com.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workload Isolation with Queue Sharding</title>
      <link>https://www.mikeperham.com/2019/12/17/workload-isolation-with-queue-sharding/</link>
      <pubDate>Tue, 17 Dec 2019 10:55:37 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/12/17/workload-isolation-with-queue-sharding/</guid>
      <description>

&lt;p&gt;A number of customers have contacted me with a common problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We run a multi-tenant system where our users can perform an action which
results in a huge number of jobs being enqueued. When this happens, other
users see significant delays in their jobs being processed while our
Sidekiq cluster works through the backlog for that one user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The issue is this: if you give 100% of your resources to process that
user&#39;s backlog, 100% of your customers will feel the pain of that backlog
delay. For years I&#39;ve recommended customers use a simple setup with three
queues: &lt;code&gt;critical&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;bulk&lt;/code&gt;. If user A throws 100,000 jobs
into &lt;code&gt;bulk&lt;/code&gt;, processing those jobs would be low priority and perhaps take
one or two hours.  That backlog will not block critical or default jobs &lt;strong&gt;but&lt;/strong&gt; it will
delay any bulk processing by other users.&lt;/p&gt;

&lt;p&gt;Generically, this issue is known as &lt;code&gt;workload isolation&lt;/code&gt;. AWS, in
particular, has published a few articles on how they deal with this
problem in their services and they&#39;ve highlighted an interesting
technique used to provide isolation between customers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d1.awsstatic.com/legal/builders-library/Screenshots/shuffle-sharding-with-eight-workers.97e815152d06856351e6976ed33029414f1a7f99.png&#34; alt=&#34;shuffle sharding example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The key idea is known as &lt;a href=&#34;https://aws.amazon.com/builders-library/workload-isolation-using-shuffle-sharding/&#34;&gt;shuffle sharding&lt;/a&gt; but the technique is not specific to AWS, you can use it today with your Sidekiq cluster.
Go read that article, it&#39;s quite good.&lt;/p&gt;

&lt;h2 id=&#34;queues-and-processes&#34;&gt;Queues and Processes&lt;/h2&gt;

&lt;p&gt;We&#39;ll use real numbers here to minimize confusion but you can
adjust these numbers for your own scale.&lt;/p&gt;

&lt;p&gt;Note also that this technique is completely separate from Redis
sharding.
If you have 4 Redis shards, you have 4 Sidekiq clusters.
This queue sharding technique is specific to a single Sidekiq cluster
running against a single Redis instance.&lt;/p&gt;

&lt;p&gt;We assume that operations which trigger high job volumes will go into a logical &lt;code&gt;bulk&lt;/code&gt;
queue but in reality your app will enqueue those jobs into eight shards: bulk0 - bulk7.&lt;/p&gt;

&lt;p&gt;You have 8 Sidekiq processes and each process will process &lt;code&gt;critical&lt;/code&gt;,
&lt;code&gt;default&lt;/code&gt; and 2 bulk shards.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;shards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
shards&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;times &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  other &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;succ &lt;span style=&#34;color:#e6db74&#34;&gt;% shards
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bundle exec sidekiq -q critical -q default -q bulk&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;idx&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -q bulk&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;other&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now each user&#39;s operation should dynamically target a bulk shard.
If you have a random ID for the overall operation, you can do something as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bulk&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;operationID &lt;span style=&#34;color:#e6db74&#34;&gt;% 8}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;100_000.times &lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# push 100,000 jobs to a bulk shard&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SomeWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;queue&lt;/span&gt;:q)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(idx)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other bulk user operations should randomly select a shard also. They have a 1 in 8 chance of selecting the same shard but most of the time the operations will be isolated from each other.
Net result: if a user operation creates a large number of bulk jobs, this will only affect 12%
of other operations rather than 100% as we were seeing at the beginning. The trade off is that only two Sidekiq processes will be processing any one bulk shard.&lt;/p&gt;

&lt;p&gt;Want faster processing?  Spread the jobs across two random shards. You
get 100% more processes but only increase your odds from 12% to 25%
that you will disrupt anyone.&lt;/p&gt;

&lt;p&gt;That trade off is the crux: you might want more processes or fewer
shards to get that backlog processed quicker. 32 processes and 8 shards
will get you 4 processes for a queue. 16 processes with 4 shards will
also get you 4 processes for a queue but will mean that 1/4 of
operations will clash instead of 1/8. Only you can judge what&#39;s
appropriate for your app and budget.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;By sharding the &lt;code&gt;bulk&lt;/code&gt; queue, we isolate our Sidekiq resources into buckets so
that any one bulk user operation can&#39;t monopolize all resources.  Ultimately
this is a trade off because it also naturally limits the thoroughput of
those operations: they can&#39;t use the full set of resources in production
to finish quicker. High priority operations still have the option to
utilize more than one bulk shard or target the &lt;code&gt;default&lt;/code&gt; queue in order to
blast through a backlog with 100% of your resources.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Sidekiq 6.0</title>
      <link>https://www.mikeperham.com/2019/09/03/welcome-to-sidekiq-6.0/</link>
      <pubDate>Tue, 03 Sep 2019 09:00:00 +0000</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/09/03/welcome-to-sidekiq-6.0/</guid>
      <description>

&lt;p&gt;I&#39;m happy to announce that Sidekiq 6.0, Sidekiq Pro 5.0 and Sidekiq
Enterprise 2.0 are now generally available after nine months of work by
various contributors! 🎉🎂&lt;/p&gt;

&lt;h2 id=&#34;no-more-daemonizing&#34;&gt;No More Daemonizing&lt;/h2&gt;

&lt;p&gt;Sidekiq 6.0 no longer offers the ability to run as an circa-1990s init.d-style daemon by removing the &lt;code&gt;logfile&lt;/code&gt;, &lt;code&gt;pidfile&lt;/code&gt; and
&lt;code&gt;daemonize&lt;/code&gt; command line flags.
For a decade, all major Unix systems have offered init tooling that handle these concerns automatically for the developer and sysadmin.
For the last five years &lt;a href=&#34;https://www.mikeperham.com/2014/09/22/dont-daemonize-your-daemons/&#34;&gt;I&#39;ve blogged about and recommended against&lt;/a&gt; using these flags and
Sidekiq has provided &lt;a href=&#34;https://github.com/mperham/sidekiq/tree/master/examples&#34;&gt;example systemd and upstart configuration files&lt;/a&gt; since day one.
No more excuses, good riddance.&lt;/p&gt;

&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;

&lt;p&gt;Sidekiq&#39;s logging subsystem was overhauled by Andrew Babichev to allow pluggable logging
formatters, allowing the user to configure JSON-formatted log output in
production, for instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure_server &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_formatter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Formatters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;code&gt;sidekiq/logger&lt;/code&gt; for implementation details.&lt;/p&gt;

&lt;h2 id=&#34;activejob-integration&#34;&gt;ActiveJob integration&lt;/h2&gt;

&lt;p&gt;I recently added the ability for ActiveJobs to use the &lt;code&gt;sidekiq_options&lt;/code&gt;
method like any normal &lt;code&gt;Sidekiq::Worker&lt;/code&gt; to control Sidekiq features.
This makes it  easier to tailor Sidekiq&#39;s retry subsystem to each
individual ActiveJob&#39;s needs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleJob&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveJob&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;
  queue_as &lt;span style=&#34;color:#e6db74&#34;&gt;:critical&lt;/span&gt;
  sidekiq_options &lt;span style=&#34;color:#66d9ef&#34;&gt;retry&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;backtrace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;upgrade-requirements&#34;&gt;Upgrade Requirements&lt;/h2&gt;

&lt;p&gt;Like Rails 6.0, Sidekiq 6.0 has upgraded platform requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby 2.5+&lt;/li&gt;
&lt;li&gt;Redis 4.0+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your Redis provider should have documentation on how to migrate your
Redis instance to a supported version.&lt;/p&gt;

&lt;h2 id=&#34;twitter&#34;&gt;Twitter&lt;/h2&gt;

&lt;p&gt;You may or may not have noticed but I&#39;ve deleted my Twitter account.
I can&#39;t interact with people as easily but it&#39;s debatable whether that is a feature or a bug.
I&#39;m still lurking in various Ruby places, Mastodon, /r/ruby, some Slack groups, etc and you can always find me
via email. I strongly encourage Sidekiq users to join me at my weekly &lt;a href=&#34;https://sidekiq.org/support.html&#34;&gt;Happy
Hour&lt;/a&gt;.  I get to meet you and learn your needs, you get to learn
Sidekiq straight from me!&lt;/p&gt;

&lt;h2 id=&#34;wrapup&#34;&gt;Wrapup&lt;/h2&gt;

&lt;p&gt;That&#39;s the quick overview, a few changes but mostly Sidekiq has been stable!
I hope these changes make Sidekiq more useful and reliable than ever to you.
The actual Upgrade notes can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/6.0-Upgrade.md&#34;&gt;Sidekiq 6.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Pro-5.0-Upgrade.md&#34;&gt;Sidekiq Pro 5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Ent-2.0-Upgrade.md&#34;&gt;Sidekiq Enterprise 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Something For Nothing</title>
      <link>https://www.mikeperham.com/2019/07/19/something-for-nothing/</link>
      <pubDate>Fri, 19 Jul 2019 10:27:11 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/07/19/something-for-nothing/</guid>
      <description>

&lt;p&gt;&lt;img style=&#34;float: right; padding: 10px&#34; src=&#34;https://www.mikeperham.com/images/freebeer.jpg&#34; alt=&#34;freebeer&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Do you like free things? Would you like to get something for nothing?
Are you a Sidekiq user? If you answered yes to these questions, I have a
case study in how one customer effectively got Sidekiq Enterprise for
free.&lt;/p&gt;

&lt;p&gt;One Friday morning, two engineers jumped into my weekly Happy Hour to ask me about a Sidekiq problem they were having.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;We have two Sidekiq dynos with 40 threads each: we find that after about 5 minutes, they are only using about 20 threads; shouldn&#39;t all 40 threads pick up jobs? The jobs perform image processing.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;bundle exec sidekiq -c 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They were using two Heroku &lt;code&gt;performance-m&lt;/code&gt; dynos, which cost $250/month each.&lt;/p&gt;

&lt;h2 id=&#34;mri-has-a-limit&#34;&gt;MRI has a Limit&lt;/h2&gt;

&lt;p&gt;If you are a Ruby expert, you might already have an idea of what&#39;s going
wrong but the crux is this: &lt;strong&gt;one MRI process will only use a single core&lt;/strong&gt;.
Now consider &lt;strong&gt;image processing is often CPU intensive&lt;/strong&gt;.
They were crushing a single core on each performance-m dyno while the rest of the cores sat there doing nothing.
Those extra 20 threads weren&#39;t lazy -- they literally couldn&#39;t get any CPU time scheduled!&lt;/p&gt;

&lt;h2 id=&#34;multi-process-to-the-rescue&#34;&gt;Multi-Process to the Rescue&lt;/h2&gt;

&lt;p&gt;The answer was easy since they were a Sidekiq Enterprise customer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec sidekiqswarm -c 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sidekiqswarm&lt;/code&gt; is a special binary which &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Ent-Multi-Process&#34;&gt;forks a Sidekiq process for
each core on the
dyno&lt;/a&gt;. We reduce the thread count so each core
isn&#39;t crushed by image processing.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Before&lt;/th&gt;
&lt;th&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dynos&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Threads&lt;/td&gt;
&lt;td&gt;80 (2 x 40)&lt;/td&gt;
&lt;td&gt;80 (4 x 20)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Core usage&lt;/td&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cost&lt;/td&gt;
&lt;td&gt;$500&lt;/td&gt;
&lt;td&gt;$250 + $179&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Savings&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;$71/mo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Before they had 1 busy core and 3 idle cores on each dyno.  Now they
have 4 busy cores and can spin down the second dyno instance to save
$250/mo. Since Sidekiq Enterprise costs $179/mo, this change paid for
Sidekiq Enterprise, saved an additional $71/mo and ensured that future worker dynos are fully utilized.&lt;/p&gt;

&lt;p&gt;If you are using Performance dynos and not using Sidekiq Enterprise, you
are likely paying for too many dynos.  &lt;a href=&#34;https://billing.contribsys.com/sent/new.cgi&#34;&gt;Purchasing Sidekiq Enterprise&lt;/a&gt; and
using &lt;code&gt;sidekiqswarm&lt;/code&gt; to reduce your dyno count may cover the entire
purchase price.  You get all the Sidekiq Pro and Enterprise features
effectively for free.  Each sale has a 14 day money back guarantee if
you want to try it today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proxying Golang Web Applications</title>
      <link>https://www.mikeperham.com/2019/07/17/proxying-golang-web-applications/</link>
      <pubDate>Wed, 17 Jul 2019 16:26:43 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/07/17/proxying-golang-web-applications/</guid>
      <description>

&lt;p&gt;Recently someone posted an issue asking if &lt;a href=&#34;https://contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; could support putting
&lt;code&gt;nginx&lt;/code&gt; in front of Faktory&#39;s Web UI.  Normally you access the Web UI
like &lt;code&gt;http://localhost:7420/&lt;/code&gt; but they wanted it to look something like
&lt;code&gt;http://somehost:8080/faktory&lt;/code&gt;.  That&#39;s quite common when trying to wrap
multiple systems into something that looks like one website to the
browser.&lt;/p&gt;

&lt;p&gt;The issue is that the Web UI assumed it was at the root, so
it hardcoded paths like &lt;code&gt;/static/application.css&lt;/code&gt;.  If you mount the Web
UI at &lt;code&gt;/faktory&lt;/code&gt;, you want that CSS URL to become
&lt;code&gt;/faktory/static/application.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After thirty minutes of Googling, I could find nothing on how to solve
this problem so I put on my thinking cap and ground it out over 3-4
hours today.  Here&#39;s the scoop.&lt;/p&gt;

&lt;h2 id=&#34;nginx-configuration&#34;&gt;nginx Configuration&lt;/h2&gt;

&lt;p&gt;Here&#39;s the nginx configuration to forward &lt;code&gt;/faktory&lt;/code&gt; to
Faktory at its default URL.  We set a number of headers which might be useful in the future
but only &lt;code&gt;X-Script-Name&lt;/code&gt; is critical. Note the &lt;code&gt;/faktory&lt;/code&gt; in the first two lines needs to
stay in sync.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /faktory {
  proxy_set_header X-Script-Name /faktory;

  proxy_pass   http://127.0.0.1:7420;
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Scheme $scheme;
  proxy_set_header X-Real-IP $remote_addr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SCRIPT_NAME&lt;/code&gt; is a legacy of CGI but it&#39;s used by Python and Ruby apps
to know the proxy prefix for requests coming to an app.  We use a properly
named HTTP header, X-Script-Name, in each request to signal this value to Faktory.&lt;/p&gt;

&lt;h2 id=&#34;abstract-that-mux&#34;&gt;Abstract that Mux!&lt;/h2&gt;

&lt;p&gt;Go&#39;s http package exposes a Mux type which acts as the router in a Go
webapp. We tell it to route all &lt;code&gt;/static/&lt;/code&gt; requests like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;staticHandler&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this has one very big problem: it doesn&#39;t know about the &lt;code&gt;/faktory&lt;/code&gt;
prefix!&lt;/p&gt;

&lt;p&gt;The trick I figured out is to add a special Mux &lt;em&gt;before&lt;/em&gt; the application
Mux which matches all requests and can unmangle any proxied requests so
they look like an unproxied request to the app Mux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;staticHandler&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Script-Name&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// this is super greasy, not sure it&amp;#39;s optimal but Works For Me™
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestURI&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Replace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestURI&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestURI&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;every-link-must-be-relative&#34;&gt;Every Link must be Relative&lt;/h2&gt;

&lt;p&gt;Within the HTML markup, I had to change every URL and path to use a
helper to generate the relative path with any necessary prefix.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fullpath&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;relpath&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Script-Name&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;relpath&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-erb&#34; data-lang=&#34;erb&#34;&gt;&amp;lt;link href=&amp;#34;&amp;lt;%= fullpath(req, &amp;#34;/static/application.css&amp;#34;) %&amp;gt;&amp;#34; ...&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;req.Header.Get&lt;/code&gt; returns &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; when there is no value set so the base case is handled smoothly.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;No rocket science here but it was interesting to find a non-trivial HTTP
edge case in Go without a blog post on the subject and very rewarding to
solve it myself. &lt;a href=&#34;https://github.com/contribsys/faktory/commit/92d88d33f3a820ad5cc2085b1b12c78b7e5b8ea7&#34;&gt;Here&#39;s the big commit that landed in Faktory to add
proxy support.&lt;/a&gt;  I hope this helps someone else!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leaving Twitter</title>
      <link>https://www.mikeperham.com/2019/07/11/leaving-twitter/</link>
      <pubDate>Thu, 11 Jul 2019 10:23:50 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/07/11/leaving-twitter/</guid>
      <description>&lt;p&gt;Some have already noticed but I&#39;ve been booted out of Twitter.&lt;/p&gt;

&lt;p&gt;&amp;quot;Why, Mike?&amp;quot;&lt;/p&gt;

&lt;p&gt;Because set my birth year to 2000 in my profile. I
didn&#39;t think it was anyone&#39;s business, including Twitter, what my age
was. Since I created the account in 2008, Twitter said I was too young
to use their service and immediately locked the account.&lt;/p&gt;

&lt;p&gt;Quite possibly the least cool way to get your account locked?&lt;/p&gt;

&lt;p&gt;Eleven years. Tens of thousands of tweets. 9,000+ followers. Daily
engagement. None of that mattered.&lt;/p&gt;

&lt;p&gt;Yep, I can write to them asking them to unlock my account but
I see this as the last straw.  Free, centralized social media services
will always care more about their advertisers and PR optics
than they care for their users. I don&#39;t want to use a service that continues to
allow Nazis under the guise of free speech.&lt;/p&gt;

&lt;p&gt;&amp;quot;What&#39;s next?&amp;quot;&lt;/p&gt;

&lt;p&gt;I&#39;ve moved over to Mastodon where I can pick an instance whose policies
I respect. &lt;a href=&#34;https://mastodon.xyz/@mperham&#34;&gt;I&#39;m here for now&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Faktory with JavaScript</title>
      <link>https://www.mikeperham.com/2019/01/16/using-faktory-with-javascript/</link>
      <pubDate>Wed, 16 Jan 2019 09:00:55 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/01/16/using-faktory-with-javascript/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; is my new polyglot background job system, allowing any programming
language to use background jobs.  I&#39;ve documented how to
use Faktory with Ruby and Go as I&#39;m an expert in both languages.
Today I wanted to step outside my comfort zone and try Faktory with a
language I barely know: JavaScript.  Let&#39;s see how easy it is for me, a noob,
to get JavaScript jobs running with Faktory!&lt;/p&gt;

&lt;p&gt;We need three pieces for any background job system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client pushes jobs to the server.&lt;/li&gt;
&lt;li&gt;The server (i.e. Faktory) manages the queues and jobs.&lt;/li&gt;
&lt;li&gt;The worker pulls jobs from the server and executes them.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;

&lt;p&gt;Most importantly, you&#39;ll need the &lt;code&gt;faktory&lt;/code&gt; server installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap contribsys/faktory
brew install faktory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On macOS, easy.
See &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Installation&#34;&gt;Installation&lt;/a&gt; if you are on Linux.&lt;/p&gt;

&lt;h2 id=&#34;javascript-setup&#34;&gt;JavaScript Setup&lt;/h2&gt;

&lt;p&gt;First thing I did was install Node with &lt;code&gt;brew install node&lt;/code&gt;, which got me Node 11.6.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install node
$ npm install faktory-worker
+ faktory-worker@2.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We install the &lt;code&gt;faktory-worker&lt;/code&gt; package, which is the JavaScript client/worker library
provided by &lt;a href=&#34;https://github.com/jbielick/faktory_worker_node&#34;&gt;jbielick/faktory_worker_node&lt;/a&gt;.
We&#39;ll use it to push and fetch jobs.&lt;/p&gt;

&lt;h2 id=&#34;client-script&#34;&gt;Client Script&lt;/h2&gt;

&lt;p&gt;We&#39;ll create a script to send a new job to Faktory every second.  Here we
create an &lt;code&gt;adder&lt;/code&gt; job with two random integers for arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;randInt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;faktory-worker&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createJob&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;job&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;randInt&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;randInt&lt;/span&gt;()).&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;jid&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createJob&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createJob&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;worker-script&#34;&gt;Worker Script&lt;/h2&gt;

&lt;p&gt;The worker is the long-running process which fetches jobs from Faktory and
executes them.  We register the set of job types we know about and then
wait for jobs from Faktory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;faktory-worker&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) =&amp;gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${a} + ${b} = ${a+b}&amp;#34;&lt;/span&gt;)
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;work&lt;/span&gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;// send INT signal to shutdown gracefully
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Finally I created a &lt;code&gt;Procfile&lt;/code&gt; which runs all three parts and used
foreman to run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install foreman
$ cat Procfile
faktory: /usr/local/bin/faktory
client: /usr/local/bin/node ./fclient.js
worker: /usr/local/bin/node ./fworker.js
$ foreman start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ foreman start
12:37:31 faktory.1 | started with pid 40472
12:37:31 client.1  | started with pid 40473
12:37:31 worker.1  | started with pid 40474
12:37:31 faktory.1 | Faktory 0.9.4
12:37:31 faktory.1 | Copyright © 2019 Contributed Systems LLC
12:37:31 faktory.1 | Licensed under the GNU Public License 3.0
12:37:31 faktory.1 | I 2019-01-15T20:37:31.437Z Initializing redis storage at /Users/mikeperham/.faktory/db, socket /Users/mikeperham/.faktory/db/redis.sock
12:37:31 faktory.1 | I 2019-01-15T20:37:31.469Z Web server now listening at localhost:7420
12:37:31 faktory.1 | I 2019-01-15T20:37:31.469Z PID 40472 listening at localhost:7419, press Ctrl-C to stop
12:37:32 worker.1  | 754 + 43 = 797
12:37:33 worker.1  | 841 + 51 = 892
12:37:34 worker.1  | 706 + 756 = 1462
12:37:35 worker.1  | 187 + 343 = 530
12:37:36 worker.1  | 690 + 587 = 1277
12:37:37 worker.1  | 368 + 168 = 536
12:37:38 worker.1  | 152 + 900 = 1052
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!
We are creating a job in our JavaScript client process, sending it to Faktory which distributes it to our Node worker process.
Our JavaScript client could be an Express web application or anything else.
In this way you can scale your job processing across many, many machines and workers.&lt;/p&gt;

&lt;p&gt;Now while it is running, open your browser to &lt;a href=&#34;http://localhost:7420&#34;&gt;http://localhost:7420&lt;/a&gt;
and check out the nice dashboard as your jobs process.
With the dashboard you can see jobs which have recently failed and are awaiting retry.
Got a bug in your code?
The worker will catch the exception and report the failure to Faktory so it can retry the job later.&lt;/p&gt;

&lt;p&gt;If you&#39;re a JavaScript developer, I hope this piques your curiousity to try Faktory.
Remember Faktory&#39;s advantage is that you can push and pull jobs with any programming language.
Want to create jobs in Ruby or PHP and process them in JavaScript?
No problem!
Check out all the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Related-Projects#language-bindings&#34;&gt;different languages supported&lt;/a&gt; today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Faktory with Python</title>
      <link>https://www.mikeperham.com/2019/01/08/using-faktory-with-python/</link>
      <pubDate>Tue, 08 Jan 2019 10:03:54 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/01/08/using-faktory-with-python/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; is my new polyglot background job system, allowing any programming
language to use background jobs.  I&#39;ve documented how to
use Faktory with Ruby and Go as I&#39;m an expert in both languages.
Today I wanted to step outside my comfort zone and try Faktory with a
language I don&#39;t know: Python.  Let&#39;s see how easy it is for me, a noob,
to get Python jobs running with Faktory!&lt;/p&gt;

&lt;p&gt;We need three pieces for any background job system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client pushes jobs to the server.&lt;/li&gt;
&lt;li&gt;The server (i.e. Faktory) manages the queues and jobs.&lt;/li&gt;
&lt;li&gt;The worker pulls jobs from the server and executes them.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;

&lt;p&gt;Most importantly, you&#39;ll need the &lt;code&gt;faktory&lt;/code&gt; server installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap contribsys/faktory
brew install faktory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On macOS, easy.
See &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Installation&#34;&gt;Installation&lt;/a&gt; if you are on Linux.&lt;/p&gt;

&lt;h2 id=&#34;python-setup&#34;&gt;Python Setup&lt;/h2&gt;

&lt;p&gt;First thing I did was install a modern Python with &lt;code&gt;brew install
python&lt;/code&gt;, which got me Python 3.7.2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install python
$ pip install faktory
Successfully installed faktory-0.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We install the &lt;code&gt;faktory&lt;/code&gt; package, which is the Python client/worker library
provided by &lt;a href=&#34;https://github.com/cdrx/faktory_worker_python&#34;&gt;cdrx/faktory_worker_python&lt;/a&gt;.
We&#39;ll use it to push and fetch jobs.&lt;/p&gt;

&lt;h2 id=&#34;client-script&#34;&gt;Client Script&lt;/h2&gt;

&lt;p&gt;We&#39;ll create a very simple script to create a job every second.  Here we
create an &lt;code&gt;adder&lt;/code&gt; job with two random integers for arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fclient.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; faktory
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time

time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; faktory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; client:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;), random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)))
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;worker-script&#34;&gt;Worker Script&lt;/h2&gt;

&lt;p&gt;The worker is the long-running process which fetches jobs from Faktory and
executes them.  We register the set of job types we know about and then
wait for jobs from Faktory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fworker.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; faktory &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Worker
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;INFO)

time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;adder&lt;/span&gt;(x, y):
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, x, y, x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y)

w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Worker(queues&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;], concurrency&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;register(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, adder)
w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Finally I created a &lt;code&gt;Procfile&lt;/code&gt; which runs all three parts and used
foreman to run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install foreman
$ cat Procfile
faktory: /usr/local/bin/faktory
client: /usr/local/bin/python3.7 ./fclient.py
worker: /usr/local/bin/python3.7 ./fworker.py
$ foreman start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ foreman start
10:37:21 faktory.1 | started with pid 7319
10:37:21 client.1  | started with pid 7320
10:37:21 worker.1  | started with pid 7321
10:37:21 faktory.1 | Faktory 0.9.3
10:37:21 faktory.1 | Copyright © 2019 Contributed Systems LLC
10:37:21 faktory.1 | Licensed under the GNU Public License 3.0
10:37:21 faktory.1 | I 2019-01-02T18:37:21.055Z Initializing redis storage at /Users/mikeperham/.faktory/db, socket /Users/mikeperham/.faktory/db/redis.sock
10:37:21 faktory.1 | I 2019-01-02T18:37:21.084Z Web server now listening at localhost:7420
10:37:21 faktory.1 | I 2019-01-02T18:37:21.084Z PID 7319 listening at localhost:7419, press Ctrl-C to stop
10:37:22 worker.1  | INFO:faktory.worker:Registered task: adder
10:37:22 worker.1  | INFO:faktory.connection:Connecting to localhost:7419
10:37:22 worker.1  | INFO:faktory.worker:Queues: default
10:37:22 worker.1  | INFO:faktory.worker:Labels: python
10:37:22 worker.1  | INFO:root:943 + 720 = 1663
10:37:23 worker.1  | INFO:root:131 + 259 = 390
10:37:24 worker.1  | INFO:root:272 + 304 = 576
10:37:25 faktory.1 | I 2019-01-02T18:37:25.090Z Retries processed 2 jobs
10:37:25 worker.1  | INFO:root:418 + 86 = 504
10:37:26 worker.1  | INFO:root:818 + 56 = 874
10:37:27 worker.1  | INFO:root:619 + 237 = 856
10:37:28 worker.1  | INFO:root:926 + 93 = 1019
10:37:29 worker.1  | INFO:root:481 + 812 = 1293
10:37:30 worker.1  | INFO:root:391 + 224 = 615
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!
We are creating a job in our Python client process, sending it to Faktory which distributes it to our Python worker process.
Our Python client could be a Django application or anything else.
In this way you can scale your job processing across many, many machines and workers.&lt;/p&gt;

&lt;p&gt;Now while it is running, open your browser to &lt;a href=&#34;http://localhost:7420&#34;&gt;http://localhost:7420&lt;/a&gt;
and check out the nice dashboard as your jobs process.
With the dashboard you can see jobs which have recently failed and are awaiting retry.
Got a bug in your code?
The worker will catch the exception and report the failure to Faktory so it can retry the job later.&lt;/p&gt;

&lt;p&gt;If you&#39;re a Python developer, I hope this piques your curiousity to try Faktory.
Remember Faktory&#39;s advantage is that you can push and pull jobs with any programming language.
Want to create jobs in PHP and process them in Python?
No problem!
Check out all the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Related-Projects#language-bindings&#34;&gt;different languages supported&lt;/a&gt; today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Faktory Pro</title>
      <link>https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/</link>
      <pubDate>Sat, 01 Dec 2018 10:13:45 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/</guid>
      <description>

&lt;p&gt;I&#39;m happy to announce Faktory Pro, my commercial version of &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt;, is now available for purchase.
Faktory is my next generation background job system which brings Sidekiq functionality to &lt;strong&gt;all programming languages&lt;/strong&gt;.
If you want background jobs in Python, JavaScript, PHP, Go, Ruby, or Rust, Faktory can work with them all!
It gives you a standard job interface and conventions useful for all languages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-ui.png&#34; alt=&#34;faktory ui&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-jobs&#34;&gt;Why Jobs?&lt;/h2&gt;

&lt;p&gt;I believe background jobs are the best architectural pattern for scaling typical
business apps to many machines.  Sidekiq has been enormously successful
because it implements that pattern and adds opinionated conventions
which make the average developer&#39;s life much easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A standard mechanism for implementing and creating a unit of work&lt;/li&gt;
&lt;li&gt;A standard process for error handling with automatic retries and backoff&lt;/li&gt;
&lt;li&gt;&amp;quot;All-in-one&amp;quot; packaging so the base package includes everything necessary: client API, worker process, management APIs, and a beautiful Web UI translated to 25 languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to build and maintain your own low-level infrastructure, Faktory is not
for you. If you want to build and scale a traditional business app as quickly and
painlessly as possible, Faktory is designed for you.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;This initial launch includes these features but &lt;strong&gt;the Pro feature list here will grow over time&lt;/strong&gt;.
Notably I will implement as many of the &lt;a href=&#34;https://sidekiq.org&#34;&gt;commercial Sidekiq features&lt;/a&gt; as possible.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Cron&#34;&gt;Cron jobs&lt;/a&gt; - kick off jobs on a regular schedule.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Redis-Gateway&#34;&gt;Redis Gateway&lt;/a&gt; - expose Redis to the network so you can take backups, set up a replica, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Expiring-Jobs&#34;&gt;Expiring jobs&lt;/a&gt; - configure jobs to expire if they have not successfully processed within some time interval&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Future features might include metrics, batches, unique jobs, encryption, Web UI search, etc.
Faktory&#39;s different architecture means some features aren&#39;t possible but enables others that Sidekiq couldn&#39;t do well, like queue throttling.
I&#39;m excited to see what new things are possible!&lt;/p&gt;

&lt;h2 id=&#34;how-to-try-it&#34;&gt;How to Try It&lt;/h2&gt;

&lt;p&gt;There is a macOS binary of Faktory Pro available for free trial on your
local laptop on the &lt;a href=&#34;https://github.com/contribsys/faktory/releases&#34;&gt;Faktory releases&lt;/a&gt; page.
Additionally each sale comes with a 14 day trial period -- you won&#39;t be charged for two weeks.&lt;/p&gt;

&lt;h2 id=&#34;pricing&#34;&gt;Pricing&lt;/h2&gt;

&lt;p&gt;Faktory Pro is a server you run and is priced &lt;em&gt;per production instance&lt;/em&gt; at $149/mo for the first server and $49/mo for each additional server.
Each Faktory Pro server can handle thousands of jobs per second under
normal conditions.
Testing, staging and development instances are unlimited and free.
For the price of one consultant-hour per month, you get a well-maintained and well-supported feature-rich job system.&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;&lt;a href=&#34;https://billing.contribsys.com/fpro/new.cgi&#34;&gt;buy Faktory Pro&lt;/a&gt;&lt;/strong&gt; right here.
Got questions?
Check out the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki&#34;&gt;wiki documentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/contribsys/faktory/issues/new&#34;&gt;open an issue&lt;/a&gt; or &lt;a href=&#34;https://gitter.im/contribsys/faktory/&#34;&gt;jump into the chatroom&lt;/a&gt; and say hi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faktory 0.9.0 - Hello, Redis!</title>
      <link>https://www.mikeperham.com/2018/10/16/faktory-0.9.0-hello-redis/</link>
      <pubDate>Tue, 16 Oct 2018 09:26:18 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/16/faktory-0.9.0-hello-redis/</guid>
      <description>

&lt;p&gt;Faktory is my new background job system which brings Sidekiq-like background jobs to all languages.
Want Sidekiq in PHP? Python? JavaScript? You got it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-ui.png&#34; alt=&#34;faktory ui&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Faktory 0.9 has just been released with a major architectural overhaul.
I&#39;ve replaced the previous storage engine, RocksDB, with Redis.
This change had hugely important, very good downstream effects!&lt;/p&gt;

&lt;p&gt;Want to try Faktory?  &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/&#34;&gt;The wiki has everything you need&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;why-redis&#34;&gt;Why Redis?&lt;/h2&gt;

&lt;p&gt;So why did I replace RocksDB?
RocksDB has two advantages over Redis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is very fast&lt;/li&gt;
&lt;li&gt;it is embeddable (which means it links into your process and provides an API your code calls directly).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is that &lt;strong&gt;everything else&lt;/strong&gt; is a disadvantage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has dozens of barely documented options&lt;/li&gt;
&lt;li&gt;It&#39;s written in C++, meaning a much more complex build process to embed it into a Go process&lt;/li&gt;
&lt;li&gt;It has virtually no usage outside of large corporate silos (e.g. Facebook,
Yahoo, Pinterest) where internal developers can learn and maintain it.&lt;/li&gt;
&lt;li&gt;Its API is key/value only, very low-level, with no higher-level structures supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redis, on the other hand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;has lots of great documentation.&lt;/li&gt;
&lt;li&gt;used everywhere, by everyone.&lt;/li&gt;
&lt;li&gt;has lots of commercial support and offerings.&lt;/li&gt;
&lt;li&gt;has a broad, stable, high-level API&lt;/li&gt;
&lt;li&gt;is not much slower, only 10-20%.  It&#39;ll still handle 1000s of jobs/sec.&lt;/li&gt;
&lt;li&gt;and lastly, I have years of experience supporting it in production!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now instead of a directory full of obscure files, we have a single
&lt;code&gt;faktory.rdb&lt;/code&gt; file with all data.  Now we can use &lt;code&gt;redis-cli&lt;/code&gt; and RDB
tools to introspect the datastore, monitor commands in real-time, use
existing Redis monitoring integrations to monitor Faktory&#39;s storage.
&lt;strong&gt;When we build on the shoulders of giants, the view is pretty good.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only issue I had to solve is how to &amp;quot;embed&amp;quot; Redis?  I can&#39;t link it
into the process directly so instead I updated Faktory to start Redis as
a child process and maintain a named socket to it.  By keeping it local,
using a named socket, we ensure our usage of Redis is both high
performance and secure (since Redis does not listen on the network).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-logo.png&#34; alt=&#34;faktory logo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-upcoming&#34;&gt;What&#39;s Upcoming?&lt;/h2&gt;

&lt;p&gt;With 0.9 out, I&#39;m very close to releasing Faktory Pro, my first commercially supported version of Faktory!
The initial feature list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cron jobs - enqueue jobs on a periodic schedule&lt;/li&gt;
&lt;li&gt;Expiring jobs - throw away jobs which have passed a given expiration date&lt;/li&gt;
&lt;li&gt;Redis Gateway - expose Redis on a TCP port so you can attach a replica to it for real-time replication&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This feature list is very likely to grow over time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/&#34;&gt;See the Faktory wiki for how to install and lots of documentation&lt;/a&gt;.
Join us in &lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;the chatroom&lt;/a&gt; or &lt;a href=&#34;https://github.com/contribsys/faktory/issues/&#34;&gt;open an issue&lt;/a&gt; if you have questions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
