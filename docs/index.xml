<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com</link>
    <description>Latest content from Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mperham@gmail.com (Mike Perham)</managingEditor>
    <webMaster>mperham@gmail.com (Mike Perham)</webMaster>
    <lastBuildDate>Tue, 08 Jan 2019 10:03:54 -0800</lastBuildDate>
    <atom:link href="https://www.mikeperham.com/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Faktory with Python</title>
      <link>https://www.mikeperham.com/2019/01/08/using-faktory-with-python/</link>
      <pubDate>Tue, 08 Jan 2019 10:03:54 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/01/08/using-faktory-with-python/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; is my new polyglot background job system, allowing any programming
language to use background jobs.  I&#39;ve documented how to
use Faktory with Ruby and Go as I&#39;m an expert in both languages.
Today I wanted to step outside my comfort zone and try Faktory with a
language I don&#39;t know: Python.  Let&#39;s see how easy it is for me, a noob,
to get Python jobs running with Faktory!&lt;/p&gt;

&lt;p&gt;We need three pieces for any background job system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client pushes jobs to the server.&lt;/li&gt;
&lt;li&gt;The server (i.e. Faktory) manages the queues and jobs.&lt;/li&gt;
&lt;li&gt;The worker pulls jobs from the server and executes them.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;

&lt;p&gt;Most importantly, you&#39;ll need the &lt;code&gt;faktory&lt;/code&gt; server installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap contribsys/faktory
brew install faktory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On macOS, easy.
See &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Installation&#34;&gt;Installation&lt;/a&gt; if you are on Linux.&lt;/p&gt;

&lt;h2 id=&#34;python-setup&#34;&gt;Python Setup&lt;/h2&gt;

&lt;p&gt;First thing I did was install a modern Python with &lt;code&gt;brew install
python&lt;/code&gt;, which got me Python 3.7.2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install python
$ pip install faktory
Successfully installed faktory-0.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We install the &lt;code&gt;faktory&lt;/code&gt; package, which is the Python client/worker library
provided by &lt;a href=&#34;https://github.com/cdrx/faktory_worker_python&#34;&gt;cdrx/faktory_worker_python&lt;/a&gt;.
We&#39;ll use it to push and fetch jobs.&lt;/p&gt;

&lt;h2 id=&#34;client-script&#34;&gt;Client Script&lt;/h2&gt;

&lt;p&gt;We&#39;ll create a very simple script to create a job every second.  Here we
create an &lt;code&gt;adder&lt;/code&gt; job with two random integers for arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fclient.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; faktory
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time

time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; faktory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; client:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;), random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)))
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;worker-script&#34;&gt;Worker Script&lt;/h2&gt;

&lt;p&gt;The worker is the long-running process which fetches jobs from Faktory and
executes them.  We register the set of job types we know about and then
wait for jobs from Faktory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fworker.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; faktory &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Worker
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;INFO)

time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;adder&lt;/span&gt;(x, y):
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, x, y, x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y)

w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Worker(queues&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;], concurrency&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;register(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, adder)
w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Finally I created a &lt;code&gt;Procfile&lt;/code&gt; which runs all three parts and used
foreman to run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install foreman
$ cat Procfile
faktory: /usr/local/bin/faktory
client: /usr/local/bin/python3.7 ./fclient.py
worker: /usr/local/bin/python3.7 ./fworker.py
$ foreman start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ foreman start
10:37:21 faktory.1 | started with pid 7319
10:37:21 client.1  | started with pid 7320
10:37:21 worker.1  | started with pid 7321
10:37:21 faktory.1 | Faktory 0.9.3
10:37:21 faktory.1 | Copyright Â© 2019 Contributed Systems LLC
10:37:21 faktory.1 | Licensed under the GNU Public License 3.0
10:37:21 faktory.1 | I 2019-01-02T18:37:21.055Z Initializing redis storage at /Users/mikeperham/.faktory/db, socket /Users/mikeperham/.faktory/db/redis.sock
10:37:21 faktory.1 | I 2019-01-02T18:37:21.084Z Web server now listening at localhost:7420
10:37:21 faktory.1 | I 2019-01-02T18:37:21.084Z PID 7319 listening at localhost:7419, press Ctrl-C to stop
10:37:22 worker.1  | INFO:faktory.worker:Registered task: adder
10:37:22 worker.1  | INFO:faktory.connection:Connecting to localhost:7419
10:37:22 worker.1  | INFO:faktory.worker:Queues: default
10:37:22 worker.1  | INFO:faktory.worker:Labels: python
10:37:22 worker.1  | INFO:root:943 + 720 = 1663
10:37:23 worker.1  | INFO:root:131 + 259 = 390
10:37:24 worker.1  | INFO:root:272 + 304 = 576
10:37:25 faktory.1 | I 2019-01-02T18:37:25.090Z Retries processed 2 jobs
10:37:25 worker.1  | INFO:root:418 + 86 = 504
10:37:26 worker.1  | INFO:root:818 + 56 = 874
10:37:27 worker.1  | INFO:root:619 + 237 = 856
10:37:28 worker.1  | INFO:root:926 + 93 = 1019
10:37:29 worker.1  | INFO:root:481 + 812 = 1293
10:37:30 worker.1  | INFO:root:391 + 224 = 615
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!
We are creating a job in our Python client process, sending it to Faktory which distributes it to our Python worker process.
Our Python client could be a Django application or anything else.
In this way you can scale your job processing across many, many machines and workers.&lt;/p&gt;

&lt;p&gt;Now while it is running, open your browser to &lt;a href=&#34;http://localhost:7420&#34;&gt;http://localhost:7420&lt;/a&gt;
and check out the nice dashboard as your jobs process.
With the dashboard you can see jobs which have recently failed and are awaiting retry.
Got a bug in your code?
The worker will catch the exception and report the failure to Faktory so it can retry the job later.&lt;/p&gt;

&lt;p&gt;If you&#39;re a Python developer, I hope this piques your curiousity to try Faktory.
Remember Faktory&#39;s advantage is that you can push and pull jobs with any programming language.
Want to create jobs in PHP and process them in Python?
No problem!
Check out all the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Related-Projects#language-bindings&#34;&gt;different languages supported&lt;/a&gt; today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Faktory Pro</title>
      <link>https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/</link>
      <pubDate>Sat, 01 Dec 2018 10:13:45 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/</guid>
      <description>

&lt;p&gt;I&#39;m happy to announce Faktory Pro, my commercial version of &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt;, is now available for purchase.
Faktory is my next generation background job system which brings Sidekiq functionality to &lt;strong&gt;all programming languages&lt;/strong&gt;.
If you want background jobs in Python, JavaScript, PHP, Go, Ruby, or Rust, Faktory can work with them all!
It gives you a standard job interface and conventions useful for all languages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-ui.png&#34; alt=&#34;faktory ui&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-jobs&#34;&gt;Why Jobs?&lt;/h2&gt;

&lt;p&gt;I believe background jobs are the best architectural pattern for scaling typical
business apps to many machines.  Sidekiq has been enormously successful
because it implements that pattern and adds opinionated conventions
which make the average developer&#39;s life much easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A standard mechanism for implementing and creating a unit of work&lt;/li&gt;
&lt;li&gt;A standard process for error handling with automatic retries and backoff&lt;/li&gt;
&lt;li&gt;&amp;quot;All-in-one&amp;quot; packaging so the base package includes everything necessary: client API, worker process, management APIs, and a beautiful Web UI translated to 25 languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to build and maintain your own low-level infrastructure, Faktory is not
for you. If you want to build and scale a traditional business app as quickly and
painlessly as possible, Faktory is designed for you.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;This initial launch includes these features but &lt;strong&gt;the Pro feature list here will grow over time&lt;/strong&gt;.
Notably I will implement as many of the &lt;a href=&#34;https://sidekiq.org&#34;&gt;commercial Sidekiq features&lt;/a&gt; as possible.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Cron&#34;&gt;Cron jobs&lt;/a&gt; - kick off jobs on a regular schedule.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Redis-Gateway&#34;&gt;Redis Gateway&lt;/a&gt; - expose Redis to the network so you can take backups, set up a replica, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Expiring-Jobs&#34;&gt;Expiring jobs&lt;/a&gt; - configure jobs to expire if they have not successfully processed within some time interval&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Future features might include metrics, batches, unique jobs, encryption, Web UI search, etc.
Faktory&#39;s different architecture means some features aren&#39;t possible but enables others that Sidekiq couldn&#39;t do well, like queue throttling.
I&#39;m excited to see what new things are possible!&lt;/p&gt;

&lt;h2 id=&#34;how-to-try-it&#34;&gt;How to Try It&lt;/h2&gt;

&lt;p&gt;There is a macOS binary of Faktory Pro available for free trial on your
local laptop on the &lt;a href=&#34;https://github.com/contribsys/faktory/releases&#34;&gt;Faktory releases&lt;/a&gt; page.
Additionally each sale comes with a 14 day trial period -- you won&#39;t be charged for two weeks.&lt;/p&gt;

&lt;h2 id=&#34;pricing&#34;&gt;Pricing&lt;/h2&gt;

&lt;p&gt;Faktory Pro is a server you run and is priced &lt;em&gt;per production instance&lt;/em&gt; at $149/mo for the first server and $49/mo for each additional server.
Each Faktory Pro server can handle thousands of jobs per second under
normal conditions.
Testing, staging and development instances are unlimited and free.
For the price of one consultant-hour per month, you get a well-maintained and well-supported feature-rich job system.&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;&lt;a href=&#34;https://billing.contribsys.com/fpro/new.cgi&#34;&gt;buy Faktory Pro&lt;/a&gt;&lt;/strong&gt; right here.
Got questions?
Check out the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki&#34;&gt;wiki documentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/contribsys/faktory/issues/new&#34;&gt;open an issue&lt;/a&gt; or &lt;a href=&#34;https://gitter.im/contribsys/faktory/&#34;&gt;jump into the chatroom&lt;/a&gt; and say hi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faktory 0.9.0 - Hello, Redis!</title>
      <link>https://www.mikeperham.com/2018/10/16/faktory-0.9.0-hello-redis/</link>
      <pubDate>Tue, 16 Oct 2018 09:26:18 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/16/faktory-0.9.0-hello-redis/</guid>
      <description>

&lt;p&gt;Faktory is my new background job system which brings Sidekiq-like background jobs to all languages.
Want Sidekiq in PHP? Python? JavaScript? You got it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-ui.png&#34; alt=&#34;faktory ui&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Faktory 0.9 has just been released with a major architectural overhaul.
I&#39;ve replaced the previous storage engine, RocksDB, with Redis.
This change had hugely important, very good downstream effects!&lt;/p&gt;

&lt;p&gt;Want to try Faktory?  &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/&#34;&gt;The wiki has everything you need&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;why-redis&#34;&gt;Why Redis?&lt;/h2&gt;

&lt;p&gt;So why did I replace RocksDB?
RocksDB has two advantages over Redis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is very fast&lt;/li&gt;
&lt;li&gt;it is embeddable (which means it links into your process and provides an API your code calls directly).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is that &lt;strong&gt;everything else&lt;/strong&gt; is a disadvantage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has dozens of barely documented options&lt;/li&gt;
&lt;li&gt;It&#39;s written in C++, meaning a much more complex build process to embed it into a Go process&lt;/li&gt;
&lt;li&gt;It has virtually no usage outside of large corporate silos (e.g. Facebook,
Yahoo, Pinterest) where internal developers can learn and maintain it.&lt;/li&gt;
&lt;li&gt;Its API is key/value only, very low-level, with no higher-level structures supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redis, on the other hand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;has lots of great documentation.&lt;/li&gt;
&lt;li&gt;used everywhere, by everyone.&lt;/li&gt;
&lt;li&gt;has lots of commercial support and offerings.&lt;/li&gt;
&lt;li&gt;has a broad, stable, high-level API&lt;/li&gt;
&lt;li&gt;is not much slower, only 10-20%.  It&#39;ll still handle 1000s of jobs/sec.&lt;/li&gt;
&lt;li&gt;and lastly, I have years of experience supporting it in production!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now instead of a directory full of obscure files, we have a single
&lt;code&gt;faktory.rdb&lt;/code&gt; file with all data.  Now we can use &lt;code&gt;redis-cli&lt;/code&gt; and RDB
tools to introspect the datastore, monitor commands in real-time, use
existing Redis monitoring integrations to monitor Faktory&#39;s storage.
&lt;strong&gt;When we build on the shoulders of giants, the view is pretty good.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only issue I had to solve is how to &amp;quot;embed&amp;quot; Redis?  I can&#39;t link it
into the process directly so instead I updated Faktory to start Redis as
a child process and maintain a named socket to it.  By keeping it local,
using a named socket, we ensure our usage of Redis is both high
performance and secure (since Redis does not listen on the network).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-logo.png&#34; alt=&#34;faktory logo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-upcoming&#34;&gt;What&#39;s Upcoming?&lt;/h2&gt;

&lt;p&gt;With 0.9 out, I&#39;m very close to releasing Faktory Pro, my first commercially supported version of Faktory!
The initial feature list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cron jobs - enqueue jobs on a periodic schedule&lt;/li&gt;
&lt;li&gt;Expiring jobs - throw away jobs which have passed a given expiration date&lt;/li&gt;
&lt;li&gt;Redis Gateway - expose Redis on a TCP port so you can attach a replica to it for real-time replication&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This feature list is very likely to grow over time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/&#34;&gt;See the Faktory wiki for how to install and lots of documentation&lt;/a&gt;.
Join us in &lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;the chatroom&lt;/a&gt; or &lt;a href=&#34;https://github.com/contribsys/faktory/issues/&#34;&gt;open an issue&lt;/a&gt; if you have questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Ruby&#39;s CGI</title>
      <link>https://www.mikeperham.com/2018/10/12/testing-rubys-cgi/</link>
      <pubDate>Fri, 12 Oct 2018 08:59:06 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/12/testing-rubys-cgi/</guid>
      <description>

&lt;p&gt;CGI is a standard for generating HTML pages from scripts executed as
child processes by a web server. I explained CGI and how I use it in a
previous post, &lt;a href=&#34;https://www.mikeperham.com/2015/01/05/cgi-rubys-bare-metal/&#34;&gt;CGI: Ruby&#39;s Bare Metal&lt;/a&gt;.
I like to use CGI because it means that I don&#39;t have to run any Ruby app
server (e.g. puma, passenger, unicorn) 24/7.  Less moving parts == more
robust!&lt;/p&gt;

&lt;p&gt;Those app servers get most of the press these days so sadly CGI doesn&#39;t
have much support and documentation; I couldn&#39;t find anything on how to &lt;strong&gt;test&lt;/strong&gt; CGI scripts.
These scripts handle my business, they need to work so I decided to put some effort into testing CGI.
You, dear reader, are the benefactor!&lt;/p&gt;

&lt;p&gt;Two things I learned:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Webrick, Ruby&#39;s built-in HTTP server, does have support for calling CGI scripts.
This will be critical for us, it means we don&#39;t have to install Apache or nginx to call the CGI scripts.&lt;/li&gt;
&lt;li&gt;Because CGI outputs raw HTML, we&#39;ll need to do browser-level testing
using Capybara with headless chrome or another automated browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Great! Our test suite will be a Ruby process with two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Webrick serving CGI requests&lt;/li&gt;
&lt;li&gt;Capybara requesting URLs from Webrick&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How can a Ruby process do two things at once?  With Threads, of course!&lt;/p&gt;

&lt;h2 id=&#34;webrick&#34;&gt;Webrick&lt;/h2&gt;

&lt;p&gt;Webrick is set up out of the box to serve any &lt;code&gt;.cgi&lt;/code&gt; files as Ruby CGI scripts.
You point Webrick to your &lt;code&gt;DocumentRoot&lt;/code&gt; as normal.  Note that since
Capybara is going to be driving the tests, we need Webrick to execute in
another thread so both the HTTP client and server can execute
concurrently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WEBRICK&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webrick&amp;#39;&lt;/span&gt;

  server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WEBrick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTPServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
    &lt;span style=&#34;color:#e6db74&#34;&gt;:Port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8999&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;:DocumentRoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../..&amp;#34;&lt;/span&gt;, __FILE__),
  )
  trap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INT&amp;#39;&lt;/span&gt;) { server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shutdown }

  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting Webrick on port 8999&amp;#34;&lt;/span&gt;
  server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;capybara&#34;&gt;Capybara&lt;/h2&gt;

&lt;p&gt;Most of the Capybara integration is straight out of the README, there is
only one trick necessary: since we are starting our own custom Webrick
server in a separate thread, we need to tell Capybara not to start a
server on its own and point it to ours instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;app_host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:8999&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After an hour of fiddling, here&#39;s the &lt;code&gt;test/helper.rb&lt;/code&gt; I came up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;report_on_exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capybara/minitest&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# I found poltergeist quick to install and worked first time, YMMV&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capybara/poltergeist&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;javascript_driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:poltergeist&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CGITest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Minitest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DSL&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Minitest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Assertions&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;javascript_driver
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;teardown&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_sessions!
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use_default_driver
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# Here&amp;#39;s the trick:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# We need to run the Webrick server in a separate thread so the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# testcases can make requests and block, waiting for the response.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WEBRICK&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webrick&amp;#39;&lt;/span&gt;

  server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WEBrick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTPServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
    &lt;span style=&#34;color:#e6db74&#34;&gt;:Port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8999&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;:DocumentRoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../..&amp;#34;&lt;/span&gt;, __FILE__),
  )
  trap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INT&amp;#39;&lt;/span&gt;) { server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shutdown }

  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting Webrick on port 8999&amp;#34;&lt;/span&gt;
  server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Point Capybara to Webrick!&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;app_host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:8999&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# give webrick time to boot before the tests can run&lt;/span&gt;
sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I create &lt;code&gt;test/smoke_test.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require_relative &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./helper&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SmokeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CGITest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_pro_navigation&lt;/span&gt;
    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/new.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subscribe to&amp;#39;&lt;/span&gt;)

    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/update.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Update your&amp;#39;&lt;/span&gt;)

    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/cancel.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cancel your&amp;#39;&lt;/span&gt;)

    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/delete.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Confirm your&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&#39;s a quick test to make sure the &lt;a href=&#34;https://billing.contribsys.com/spro/&#34;&gt;billing scripts for Sidekiq
Pro&lt;/a&gt; will render correctly and not crash.
Now with a little test coverage I&#39;ve got more confidence that changes won&#39;t break these scripts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Linux Packages and using Github Releases</title>
      <link>https://www.mikeperham.com/2018/10/10/building-linux-packages-and-using-github-releases/</link>
      <pubDate>Wed, 10 Oct 2018 13:31:27 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/10/building-linux-packages-and-using-github-releases/</guid>
      <description>

&lt;p&gt;I&#39;m preparing to launch &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; 0.9, a major overhaul to switch
from RocksDB to Redis as the storage engine.
The improvement in the development process is amazing.
But I need to finalize how I distribute Faktory releases, which brings
up the question:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Help me figure out how to distribute Faktory!&lt;br&gt;&lt;br&gt;When installing software infrastructure on Linux, I want use:&lt;/p&gt;&amp;mdash; ð¤ ðð (@mperham) &lt;a href=&#34;https://twitter.com/mperham/status/1050047444480753664?ref_src=twsrc%5Etfw&#34;&gt;October 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;As of right now, that tweet poll shows 58% of people want a deb, 32% want a Docker image, 7% want an rpm and 3% are Linux hipsters that lovingly craft each network packet by hand.&lt;/p&gt;

&lt;h2 id=&#34;building-packages&#34;&gt;Building Packages&lt;/h2&gt;

&lt;p&gt;By removing RocksDB, a C++ dependency, we moved from a cgo build to a pure Go build.
The advantages of a pure Go build process are hard to overstate:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I can cross-compile Linux binaries on OSX&lt;/li&gt;
&lt;li&gt;Since it doesn&#39;t use glibc and libcpp, I don&#39;t need to build distro-specific binaries&lt;/li&gt;
&lt;li&gt;I don&#39;t need to use Vagrant or Docker to run Linux in order to build packages&lt;/li&gt;
&lt;li&gt;I could narrow the package formats to only two, deb and rpm, and really I could get away with one.
DEB appears to have won the popularity contest and Debian distros seem to be the strong majority among my followers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these changes, Faktory&#39;s package build went from an hour of manually running various scripts to &lt;strong&gt;four seconds&lt;/strong&gt;.
That&#39;s four seconds for a &lt;strong&gt;full build&lt;/strong&gt;: cleaning, generating, cross compiling and building the deb/rpm files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ time make package
go generate github.com/contribsys/faktory/webui
Created package {:path=&amp;gt;&amp;quot;packaging/output/systemd/faktory_0.9.0-beta3_amd64.deb&amp;quot;}
Created package {:path=&amp;gt;&amp;quot;packaging/output/systemd/faktory-0.9.0-beta3.x86_64.rpm&amp;quot;}

real	0m4.218s
user	0m3.529s
sys	0m0.833s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are only two requirements for these packages: 64-bit Linux and systemd.
No business is running 32-bit anymore for anything but edge case reasons.
systemd has been the Ubuntu default for ~4 years now so I&#39;m ok with that for now.&lt;/p&gt;

&lt;p&gt;The unsung hero in all of this build process is &lt;a href=&#34;https://github.com/jordansissel/fpm/&#34;&gt;the &lt;code&gt;fpm&lt;/code&gt; gem&lt;/a&gt;.
Jordan Sissel deserves our eternal praise for his work in making it easy to build Linux packages anywhere.
If I could license &amp;quot;FPM Pro&amp;quot; to pay him for his work, I would in a heartbeat.
In the meantime, my public thanks will have to be enough.&lt;/p&gt;

&lt;h2 id=&#34;using-github-releases&#34;&gt;Using GitHub Releases&lt;/h2&gt;

&lt;p&gt;Now that I can build these &amp;quot;universal&amp;quot; packages, how do I distribute them?
apt/yum repos are notoriously painful to setup and run.
Easiest quick solution that I know of is to use GitHub releases:
tag the code, generate the packages and then create a release.
Here&#39;s how I create a Faktory release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; clean test package tag
  @echo Generating release notes
  ruby .github/notes.rb &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  @echo Releasing faktory &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  hub release create v&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -a packaging/output/systemd/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;_&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;_amd64.deb &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -a packaging/output/systemd/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.x86_64.rpm &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -F /tmp/release-notes.md -e -o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the Ruby script to generate the release notes automatically,
including changelog link and SHA256 sums for each file.
&lt;code&gt;brew install hub&lt;/code&gt; to get GitHub&#39;s handy CLI tool.&lt;/p&gt;

&lt;p&gt;To install that DEB:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -LO https://github.com/contribsys/faktory/releases/download/v0.9.0-beta3/faktory_0.9.0-beta3_amd64.deb
dpkg -i faktory_0.9.0-beta3_amd64.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;GitHub Releases work well enough for now.
They don&#39;t have the benefit of a full-blown package repo but they provide a stable download link for binaries and are far simpler to setup and use from my POV.
In reality, I would imagine most teams will fetch and install the package via Puppet/Chef/Ansible.
Hopefully as Faktory gets more popular, it will make its way into the official distro repos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving to Mastodon</title>
      <link>https://www.mikeperham.com/2018/09/21/moving-to-mastodon/</link>
      <pubDate>Fri, 21 Sep 2018 09:37:21 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/09/21/moving-to-mastodon/</guid>
      <description>&lt;p&gt;Last month I revived &lt;a href=&#34;https://mastodon.xyz/@mperham&#34;&gt;my Mastodon account&lt;/a&gt; after seeing one more round of
Twitter giving Nazi accounts acting in bad faith a pass while suspending
upset liberal accounts acting in good faith.&lt;/p&gt;

&lt;p&gt;I think this concept of acting in good faith vs bad faith is the crux of
the issue in social media today.  Is this person trying to make things
better or are they delaying action, spreading confusion
or uncertainty, harassing others into silence?  Often it is easy to tell
in the case of red-blooded USA patriot accounts with IP addresses in St.
Petersburg or anonymous anime fans who make it clear that they hate women.&lt;/p&gt;

&lt;p&gt;But often it&#39;s not clear at all.
People acting in good faith can still inadvertantly spread FUD and good
faith itself is not black/white.
In the end, tech can&#39;t solve a social problem.  There&#39;s no algorithm that can
correctly classify the sentiment of a 280 character message.&lt;/p&gt;

&lt;p&gt;Until social networks
demonstrate they can block bad actors at scale, federation is the only workable
solution.  Mastodon instance admins can document and enforce a Code of
Conduct and other admins can block/ban users or instances which violate their
Code.  Already there are blocklists for Mastodon instances which have
been deemed bad actors for one reason or another.&lt;/p&gt;

&lt;p&gt;It&#39;s not perfect and perhaps it won&#39;t scale very far but it does appear
to have enough traction to work today. Niche-specific instances like
&lt;a href=&#34;https://ruby.social&#34;&gt;https://ruby.social&lt;/a&gt; for Ruby developers make for nice, small communities and
small communities tend to treat each other with more respect than larger
ones.  &lt;a href=&#34;https://instances.social/&#34;&gt;Find your own community&lt;/a&gt; and wean yourself off Twitter today!&lt;/p&gt;

&lt;p&gt;Mastodon looks pretty similar to Twitter:&lt;/p&gt;







&lt;iframe src= &#34;https://mastodon.xyz/@mperham/100743659488287177/embed&#34; class=&#34;mastodon-embed&#34; style=&#34;max-width: 100%; border: 0&#34; width=&#34;600&#34; height=&#34;230&#34;&gt;&lt;/iframe&gt;



&lt;p&gt;I&#39;m at &lt;a href=&#34;https://mastodon.xyz/@mperham&#34;&gt;https://mastodon.xyz/@mperham&lt;/a&gt;
and Sidekiq is hanging out with all the Rubyists at &lt;a href=&#34;https://ruby.social/@sidekiq&#34;&gt;https://ruby.social/@sidekiq&lt;/a&gt;.  I hope you give Mastodon a try.&lt;/p&gt;







&lt;iframe src= &#34;https://ruby.social/@sidekiq/100605401147582858/embed&#34; class=&#34;mastodon-embed&#34; style=&#34;max-width: 100%; border: 0&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;&lt;/iframe&gt;


</description>
    </item>
    
    <item>
      <title>Parallelize your work with Sidekiq Pro</title>
      <link>https://www.mikeperham.com/2018/08/24/parallelize-your-work-with-sidekiq-pro/</link>
      <pubDate>Fri, 24 Aug 2018 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/08/24/parallelize-your-work-with-sidekiq-pro/</guid>
      <description>&lt;p&gt;A common issue for Sidekiq users are long jobs: jobs which
process in serial a long list of things.  Why not parallelize that work
and make it a lot faster?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MapReduce&#34;&gt;Map/Reduce&lt;/a&gt; is a pattern for distributed computing: a list of things is &lt;strong&gt;mapped&lt;/strong&gt; onto a set of jobs.
Your Sidekiq workers execute those jobs in parallel and store the results of the work.
Something then &lt;strong&gt;reduces&lt;/strong&gt; those calculations into a single result.
In this way, large volumes of work can be done in parallel, speeding up batch processing.&lt;/p&gt;

&lt;p&gt;I&#39;ve got a CSV file which needs to be processed.
Processing each row might involve web crawling or some other intensive work so we can&#39;t process it in serial without it taking hours.
We&#39;ll create a contrived example where we have a list of webpages and we want to get the bytesize of each page.
We&#39;ll use Sidekiq Pro&#39;s Batch API to perform the work in parallel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csv&#34; data-lang=&#34;csv&#34;&gt;id,name,uri
1273,Google,https://google.com
1209,Yahoo,https://yahoo.com
8273,Sidekiq,https://sidekiq.org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&#39;ll create a worker which kicks off the CSV processing and a worker which processes each row in the CSV.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CSVProcessor&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Worker&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# MAP - create a job for each row&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(csv_filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./pages.csv&amp;#34;&lt;/span&gt;)
    batch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
    batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;:success&lt;/span&gt;, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; csv_filename)
    batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(csv_filename, &lt;span style=&#34;color:#e6db74&#34;&gt;:headers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;RowProcessor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async(row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fields)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# REDUCE - do something with all the results&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_success&lt;/span&gt;(status, options)
    &lt;span style=&#34;color:#75715e&#34;&gt;# Sidekiq Pro will call this once all the RowProcessor jobs are done.&lt;/span&gt;
    data, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redis &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hgetall &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crawl-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;status&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;del &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crawl-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;status&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each_pair &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;name, size&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;size&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; bytes&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RowProcessor&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Worker&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;(row)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#66d9ef&#34;&gt;URI&lt;/span&gt;(uri))

    &lt;span style=&#34;color:#75715e&#34;&gt;# The only tricky part: we need to store the results&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# somewhere so the callback can gather the data together.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Redis is perfect for this.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# The BID is the Batch ID shared by all jobs in the batch.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redis &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hset &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crawl-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, name, content&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bytesize
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Batch feature tracks the set of jobs and runs any callbacks when all jobs are finished.&lt;/p&gt;

&lt;p&gt;I put that CSV data into ./pages.csv.
We kick off the entire process with a simple &lt;code&gt;CSVProcessor.perform_async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&#39;s the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2018-08-24T15:19:03.279Z 93268 TID-ov9mbken4 CSVProcessor JID-418bed33391e0d9d23c8151d INFO: start
2018-08-24T15:19:03.286Z 93268 TID-ov9mbken4 CSVProcessor JID-418bed33391e0d9d23c8151d INFO: done: 0.006 sec
2018-08-24T15:19:03.286Z 93268 TID-ov9mbkeg4 RowProcessor JID-97e9e7e8058a48a4cb5dc9dd BID-zFk-b6ZVqoS-6w INFO: start
2018-08-24T15:19:03.290Z 93268 TID-ov9mbkeak RowProcessor JID-754a8ecd713507ca396bf3d7 BID-zFk-b6ZVqoS-6w INFO: start
2018-08-24T15:19:03.294Z 93268 TID-ov9mbkfhk RowProcessor JID-1dfa5546400901f9a16f2181 BID-zFk-b6ZVqoS-6w INFO: start
2018-08-24T15:19:03.442Z 93268 TID-ov9mbkeg4 RowProcessor JID-97e9e7e8058a48a4cb5dc9dd BID-zFk-b6ZVqoS-6w INFO: done: 0.156 sec
2018-08-24T15:19:03.487Z 93268 TID-ov9mbkfhk RowProcessor JID-1dfa5546400901f9a16f2181 BID-zFk-b6ZVqoS-6w INFO: done: 0.193 sec
2018-08-24T15:19:03.647Z 93268 TID-ov9mbkeak RowProcessor JID-754a8ecd713507ca396bf3d7 BID-zFk-b6ZVqoS-6w INFO: done: 0.358 sec
2018-08-24T15:19:04.414Z 93268 TID-ov9mbka0k Sidekiq::Batch::Callback JID-00672f540b4dcc0f5c3d80e7 INFO: start
2018-08-24T15:19:04.420Z 93268 TID-ov9mbka0k Sidekiq::Batch::Callback JID-00672f540b4dcc0f5c3d80e7 INFO: done: 0.006 sec
2018-08-24T15:19:05.428Z 93268 TID-ov9mbkatw Sidekiq::Batch::Callback JID-9cebed28a6fd88f1877dcb46 INFO: start
Google is 11340 bytes
Sidekiq is 19475 bytes
Yahoo is 483535 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Side note: good grief, Yahoo!)&lt;/p&gt;

&lt;p&gt;We built a parallel web crawling system in less than 50 lines of Ruby code + Sidekiq Pro.
Nice.&lt;/p&gt;

&lt;p&gt;Helpful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Batches&#34;&gt;Batches wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=b2fI0vGf3Bo&amp;amp;list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1&#34;&gt;Batches screencast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://billing.contribsys.com/spro/new.cgi&#34;&gt;Buy Sidekiq Pro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Taming Rails memory bloat</title>
      <link>https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/</link>
      <pubDate>Wed, 25 Apr 2018 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/</guid>
      <description>

&lt;p&gt;MRI, the standard Ruby interpreter, has a serious problem with memory bloat in large Rails apps.
It&#39;s quite common for me to see Sidekiq processes which are 1-2GB in RSS or even larger!
It turns out that a large part of this memory usage is due to memory fragmentation: MRI uses
the OS&#39;s memory allocator by default (on Linux, almost always GNU glibc),
which seems to work poorly with Ruby&#39;s memory allocation patterns.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.speedshop.co/2017/12/04/malloc-doubles-ruby-memory.html&#34;&gt;Nate Berkopec went into great detail&lt;/a&gt; about Ruby memory bloat.  His blog post is a much deeper dive.&lt;/p&gt;

&lt;p&gt;One important note: this behavior is specific to GNU glibc on Linux.
OSX and BSD appear to have better quality allocators, not as prone to fragmentation.&lt;/p&gt;

&lt;h2 id=&#34;reducing-arenas&#34;&gt;Reducing Arenas&lt;/h2&gt;

&lt;p&gt;The major cause of fragmentation appears to be the large number of glibc memory arenas in heavily multi-threaded programs.
&amp;quot;Heavily multi-threaded&amp;quot; -- sound familiar?  That&#39;s Sidekiq.
People on Heroku have discovered that to reduce memory, they should set &lt;code&gt;-c 5&lt;/code&gt; which reduces the number of threads from 25 to 5.
That reduces the &amp;quot;heavily multi-threaded&amp;quot; trigger and leads to less bloat.&lt;/p&gt;

&lt;p&gt;But the better way is to reduce glibc&#39;s memory arena count.
Set this environment variable in your dynos, systemd unit files or however you start Sidekiq:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MALLOC_ARENA_MAX = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a noticable reduction in memory usage after rebooting.&lt;/p&gt;

&lt;h2 id=&#34;using-jemalloc&#34;&gt;Using jemalloc&lt;/h2&gt;

&lt;p&gt;Switching Ruby&#39;s allocator to jemalloc looks to be an even more effective solution... for a price.
One example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/jemalloc.jpg&#34; alt=&#34;jemalloc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The results have been described as &amp;quot;miraculous&amp;quot;.
That&#39;s &lt;strong&gt;40GB&lt;/strong&gt; worth of Sidekiq processes shrunk to &lt;strong&gt;9GB&lt;/strong&gt;, a 4x reduction.
Much of this space is fragmented memory and switching to jemalloc fixes this wasted space.
Seeing R14 errors on Heroku?
&lt;a href=&#34;https://www.levups.com/en/blog/2017/optimize_ruby_memory_usage_jemalloc_heroku_scalingo.html&#34;&gt;Just throw a little jemalloc in there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The issue with jemalloc is that it can cause problems in different environments.
For example, it&#39;s had compatibility issues with Alpine Linux so if you are running Ruby in Alpine-based Docker images, you could see segfaults or stack overflows.
If you want to try jemalloc, be sure you test your app thoroughly before pushing to production.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://oldblog.antirez.com/post/everything-about-redis-24.html&#34;&gt;Redis pulled in jemalloc explicitly to reduce memory fragmentation, with
big success&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Since we introduced the specially encoded data types Redis started suffering from fragmentation. We tried different things to fix the problem, but basically the Linux default allocator in glibc sucks really, really hard. [...] Every single case of fragmentation in real world systems was fixed by this change, and also the amount of memory used dropped a bit.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;trying-jemalloc&#34;&gt;Trying jemalloc&lt;/h2&gt;

&lt;p&gt;Want to try jemalloc on OS X?
My installed rubies seem to hardcode the memory allocator so you might need to build MRI with jemalloc specifically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install jemalloc
&lt;span style=&#34;color:#75715e&#34;&gt;# Now install Ruby with jemalloc enabled&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   with rbenv:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     RUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install 2.5.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   with ruby-install&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     ruby-install ruby-2.5.1 -- --with-jemalloc&lt;/span&gt;
chruby ruby-2.5.1
MALLOC_CONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stats_print:true irb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see lots of arcane stats print out upon exiting IRB, jemalloc is running in your Ruby.
Make sure to verify your Ruby is actually running jemalloc; it is easy to misconfigure and have it silently fall back to the default allocator.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&#39;m convinced that tuning glibc is a no brainer.
Set &lt;code&gt;MALLOC_ARENA_MAX=2&lt;/code&gt; everywhere you start Sidekiq and enjoy your extra memory.&lt;/p&gt;

&lt;p&gt;Using jemalloc is more complex.
Memory bloat has been a serious issue in large scale Rails apps as far back as I can remember in Ruby.
I wish ruby-core would pull in jemalloc as the default allocator but they seem content with glibc.
Major Rails apps like &lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/issues/3073&#34;&gt;GitLab&lt;/a&gt;, Discourse and &lt;a href=&#34;https://github.com/tootsuite/mastodon/issues/7257&#34;&gt;Mastodon&lt;/a&gt; plan to or have already integrated jemalloc but each app has to do it separately.
If you have a large Rails app, integrate jemalloc and see significant improvements, please &lt;a href=&#34;https://bugs.ruby-lang.org/issues/new&#34;&gt;open a Ruby issue&lt;/a&gt; with graphs before and after.
Let&#39;s give ruby-core all the data they need to make the right decision.&lt;/p&gt;

&lt;p&gt;Ruby-core jemalloc issues: &lt;a href=&#34;https://bugs.ruby-lang.org/issues/13524&#34;&gt;13524&lt;/a&gt;, &lt;a href=&#34;https://bugs.ruby-lang.org/issues/9113&#34;&gt;9113&lt;/a&gt;, &lt;a href=&#34;https://bugs.ruby-lang.org/issues/14718&#34;&gt;14718&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby Optimization with One Magic Comment</title>
      <link>https://www.mikeperham.com/2018/02/28/ruby-optimization-with-one-magic-comment/</link>
      <pubDate>Wed, 28 Feb 2018 07:00:00 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/02/28/ruby-optimization-with-one-magic-comment/</guid>
      <description>

&lt;p&gt;Software performance optimization is simple: find a way to do less. Ruby has a reputation for being slow and, while that impression is a decade out of date, one of the leading offenders has been the garbage collector.&lt;/p&gt;

&lt;p&gt;This leads to the question: can we speed up Ruby by creating less garbage? Absolutely!&lt;/p&gt;

&lt;h2 id=&#34;a-string-primer&#34;&gt;A String Primer&lt;/h2&gt;

&lt;p&gt;Ruby has an unfortunate default semantic that all Strings are mutable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allocates two Strings, &amp;quot;&amp;quot; and &amp;quot;mike&amp;quot;. The first, empty String is then mutated to contain &amp;quot;mike&amp;quot;. However String mutation is quite rare, more common is something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HASH&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getmike&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;HASH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# unnecessary garbage here!&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every invocation of getmike will allocate a new copy of &amp;quot;mike&amp;quot;, which is then immediately thrown away as garbage, but is required because Ruby just treats the String as a method argument which might be mutated inside &lt;code&gt;Hash#[]&lt;/code&gt;. So wasteful!&lt;/p&gt;

&lt;h2 id=&#34;freeze&#34;&gt;Freeze!&lt;/h2&gt;

&lt;p&gt;Ruby introduced the freeze concept many years ago to minimize allocation. Calling freeze on an object tells Ruby to treat it as immutable. Now Ruby knows that it can treat &amp;quot;mike&amp;quot; as a constant:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getmike&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;HASH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem? It makes the code uglier and needs to be called everywhere you declare a String.&lt;/p&gt;

&lt;h2 id=&#34;magic-comments&#34;&gt;Magic Comments!&lt;/h2&gt;

&lt;p&gt;Ruby 2.3 introduced a very nice option: each Ruby file can opt into Strings as immutable, meaning all Strings within that file will automatically freeze, with a simple magic comment at the top of the file. This will not allocate an extra String for &amp;quot;mike&amp;quot;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;HASH&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getmike&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;HASH&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mike&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-real-world&#34;&gt;The Real World&lt;/h2&gt;

&lt;p&gt;Years ago I added a lot of freeze calls to Sidekiq to minimize its impact on the garbage collector and maximize performance.
Last week &lt;a href=&#34;https://github.com/mperham/sidekiq/pull/3759/files&#34;&gt;I removed all those calls&lt;/a&gt; and added a &lt;code&gt;frozen_string_literal&lt;/code&gt; comment to all Ruby files.&lt;/p&gt;

&lt;p&gt;To see the effect, I ran an experiment with &lt;code&gt;frozen_string_literal&lt;/code&gt; using Sidekiq&#39;s benchmark script by adding &lt;code&gt;GC.disable&lt;/code&gt; and watching the RSS grow. Note how Ruby allows you to enable or disable the feature with a flag:&lt;/p&gt;

&lt;h3 id=&#34;disabled&#34;&gt;Disabled&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ RUBYOPT=--disable=frozen-string-literal bundle exec bin/sidekiqload
Created 30000 jobs
RSS: 105852 Pending: 25749
RSS: 178880 Pending: 21514
RSS: 252804 Pending: 17306
RSS: 326824 Pending: 12987
RSS: 399268 Pending: 8810
RSS: 472620 Pending: 4618
RSS: 547968 Pending: 319
RSS: 553568 Pending: 0
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enabled&#34;&gt;Enabled&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ RUBYOPT=--enable=frozen-string-literal bundle exec bin/sidekiqload
Created 30000 jobs
RSS: 105824 Pending: 25687
RSS: 174948 Pending: 21700
RSS: 245448 Pending: 17669
RSS: 316848 Pending: 13559
RSS: 388544 Pending: 9447
RSS: 456704 Pending: 5288
RSS: 450552 Pending: 1160
RSS: 457536 Pending: 0
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;frozen_string_literal&lt;/code&gt; reduces the generated garbage by ~100MB or ~20%!&lt;/strong&gt; Free performance by adding a one line comment.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Gem authors: add &lt;code&gt;# frozen_string_literal: true&lt;/code&gt; to the top of all Ruby files in a gem.&lt;/strong&gt;
It gives a free performance improvement to all your users as long as you don&#39;t use String mutation.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;If you do mutate, use &lt;code&gt;String.new&lt;/code&gt; to allocate a mutable String instead of &amp;quot;&amp;quot;.&lt;/li&gt;
&lt;li&gt;The magic comment will only work on Ruby 2.3+ but since Ruby 2.2 is EOL in one month, I think it&#39;s fair to stop performance tuning for it.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Happy 6th Birthday, Sidekiq</title>
      <link>https://www.mikeperham.com/2018/02/05/happy-6th-birthday-sidekiq/</link>
      <pubDate>Mon, 05 Feb 2018 09:00:00 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/02/05/happy-6th-birthday-sidekiq/</guid>
      <description>

&lt;div style=&#34;float: right; padding-left: 10px&#34;&gt;
&lt;figure&gt;&lt;img src=&#34;//www.mikeperham.com/images/sidekiq.png&#34; width=&#34;400&#34;/&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mikeperham.com/2012/02/07/sidekiq-simple-efficient-messaging-for-rails/&#34;&gt;Six years ago I shipped Sidekiq v0.5.0&lt;/a&gt; and changed my life.
I talked to some developers recently:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I had been working in Go for a while but I kept coming back to Ruby
because Sidekiq makes everything so fast and easy to scale.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is my recipe for success.
Sell a product developers want because it makes their job so much easier.
You don&#39;t need a sales force when developers evangelize your product to every new company they join.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My favorite quote from this AMA (with which I wholeheartedly agree) is in regards to Sidekiq: â... rarely does infrastructure so keenly understand what developers, infrastructure engineers, and operators will want out of it.â &lt;a href=&#34;https://twitter.com/mperham?ref_src=twsrc%5Etfw&#34;&gt;@mperham&lt;/a&gt; &lt;a href=&#34;https://t.co/RCdG9gwtDV&#34;&gt;https://t.co/RCdG9gwtDV&lt;/a&gt;&lt;/p&gt;&amp;mdash; John K Sawers (@johnksawers) &lt;a href=&#34;https://twitter.com/johnksawers/status/959604621181366272?ref_src=twsrc%5Etfw&#34;&gt;February 3, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;2017 revenue was right on target, about 40% higher YoY.
Nice, steady organic growth with little marketing on my part.
Why burn yourself out chasing arbitrary growth targets from investors?
Profitable?  Yes.  Growing?  Yes.
Irie, mon.&lt;/p&gt;

&lt;h2 id=&#34;today-is-a-big-day&#34;&gt;Today is a BIG DAY!&lt;/h2&gt;

&lt;p&gt;I&#39;m shipping several releases today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sidekiq 5.1 now has global job death handlers and enables the ActiveRecord query cache by default.
&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Changes.md#510&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sidekiq Pro 4.0 removes deprecated APIs and adds a new &lt;strong&gt;experimental&lt;/strong&gt; feature: batch death.
Now if a batch job dies, it marks the entire batch as dead also (since it will never succeed).
New APIs allow you to enumerate dead Batches.
Feedback is requested here, is it useful?
What further refinements would you like to see?
&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Pro-Changes.md#400&#34;&gt;Pro Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sidekiq Enterprise 1.7 adds support for &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Ent-Rolling-Restarts&#34;&gt;&lt;strong&gt;long-running jobs and rolling restarts&lt;/strong&gt;&lt;/a&gt;.
Signal USR2 and a Sidekiq process will gracefully exit once all jobs are complete, even if those jobs take hours to complete.
This has been a hugely requested feature and it took me a while to figure out how to implement it.
&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Ent-Changes.md#180&#34;&gt;Ent Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;float: right; padding-left: 10px&#34;&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h2 class=&#34;panel-title&#34;&gt;&lt;b&gt;Gotta have it?&lt;/b&gt;&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div class=&#34;panel-body&#34;&gt;
    &lt;p&gt;
      Purchase Sidekiq Pro or Sidekiq Enterprise at &lt;a href=&#34;https://sidekiq.org&#34;&gt;sidekiq.org&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;One of my goals for this year is to slow the rate of releases.
There were 12 Sidekiq releases last year but it&#39;s been 4 months since Sidekiq 5.0.5 was released.
Ideally I want quarterly maintenance releases.&lt;/p&gt;

&lt;p&gt;Lately my biggest problem has been Gmail&#39;s Spam folder.  For the last
month or two, a very high
percentage of customer receipts and welcome emails are winding up in the
Spam folder for some reason, despite me sending a very low daily volume from
my own email account. I can&#39;t explain it or debug it and feel pretty
powerless. Any email delivery wizards have ideas? My email is in the footer.&lt;/p&gt;

&lt;h2 id=&#34;faktory&#34;&gt;Faktory&lt;/h2&gt;

&lt;p&gt;I also introduced &lt;a href=&#34;http://contribsys.com/faktory/&#34;&gt;Faktory&lt;/a&gt; last year.
This is the first step in my long-term plan to bring Sidekiq goodness to all programming languages.
I&#39;ll be working on Faktory Enterprise over the next few months and hopefully have it for sale by the end of 2018.&lt;/p&gt;

&lt;h2 id=&#34;more-information&#34;&gt;More Information&lt;/h2&gt;

&lt;p&gt;Many, many people have asked me questions about sustainable open source
and following a similar path with their project.
The &lt;a href=&#34;https://www.indiehackers.com/businesses/sidekiq&#34;&gt;Indiehackers interview&lt;/a&gt; I did a year ago proved extremely popular and resonanated with many people.
Want to discuss more, ask questions?
Got an open source project you want to make sustainable?
Stop by my weekly &lt;a href=&#34;https://sidekiq.org/support.html&#34;&gt;Happy Hour&lt;/a&gt; and let&#39;s chat.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
