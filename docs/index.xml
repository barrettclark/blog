<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com</link>
    <description>Latest content from Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mperham@gmail.com (Mike Perham)</managingEditor>
    <webMaster>mperham@gmail.com (Mike Perham)</webMaster>
    <lastBuildDate>Fri, 19 Jul 2019 10:27:11 -0700</lastBuildDate>
    <atom:link href="https://www.mikeperham.com/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Something For Nothing</title>
      <link>https://www.mikeperham.com/2019/07/19/something-for-nothing/</link>
      <pubDate>Fri, 19 Jul 2019 10:27:11 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/07/19/something-for-nothing/</guid>
      <description>

&lt;p&gt;&lt;img style=&#34;float: right; padding: 10px&#34; src=&#34;https://www.mikeperham.com/images/freebeer.jpg&#34; alt=&#34;freebeer&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Do you like free things? Would you like to get something for nothing?
Are you a Sidekiq user? If you answered yes to these questions, I have a
case study in how one customer effectively got Sidekiq Enterprise for
free.&lt;/p&gt;

&lt;p&gt;One Friday morning, two engineers jumped into my weekly Happy Hour to ask me about a Sidekiq problem they were having.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;We have two Sidekiq dynos with 40 threads each: we find that after about 5 minutes, they are only using about 20 threads; shouldn&#39;t all 40 threads pick up jobs? The jobs perform image processing.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;bundle exec sidekiq -c 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They were using two Heroku &lt;code&gt;performance-m&lt;/code&gt; dynos, which cost $250/month each.&lt;/p&gt;

&lt;h2 id=&#34;mri-has-a-limit&#34;&gt;MRI has a Limit&lt;/h2&gt;

&lt;p&gt;If you are a Ruby expert, you might already have an idea of what&#39;s going
wrong but the crux is this: &lt;strong&gt;one MRI process will only use a single core&lt;/strong&gt;.
Now consider &lt;strong&gt;image processing is often CPU intensive&lt;/strong&gt;.
They were crushing a single core on each performance-m dyno while the rest of the cores sat there doing nothing.
Those extra 20 threads weren&#39;t lazy -- they literally couldn&#39;t get any CPU time scheduled!&lt;/p&gt;

&lt;h2 id=&#34;multi-process-to-the-rescue&#34;&gt;Multi-Process to the Rescue&lt;/h2&gt;

&lt;p&gt;The answer was easy since they were a Sidekiq Enterprise customer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec sidekiqswarm -c 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sidekiqswarm&lt;/code&gt; is a special binary which &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Ent-Multi-Process&#34;&gt;forks a Sidekiq process for
each core on the
dyno&lt;/a&gt;. We greatly reduce the thread count so each core
isn&#39;t crushed by image processing.&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Before&lt;/th&gt;
&lt;th&gt;After&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dynos&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Threads&lt;/td&gt;
&lt;td&gt;80 (2 x 40)&lt;/td&gt;
&lt;td&gt;80 (4 x 20)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cost&lt;/td&gt;
&lt;td&gt;$500&lt;/td&gt;
&lt;td&gt;$250 + $179&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Savings&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;$71/mo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Before they had 1 busy core and 3 idle cores on each dyno.  Now they
have 4 busy cores and can spin down the second dyno instance to save
$250/mo. Since Sidekiq Enterprise costs $179/mo, this change paid for
Sidekiq Enterprise, saved an additional $71/mo and ensured that future worker dynos are fully utilized.&lt;/p&gt;

&lt;p&gt;If you are using Performance dynos and not using Sidekiq Enterprise, you
are likely paying for too many dynos.  &lt;a href=&#34;https://billing.contribsys.com/sent/new.cgi&#34;&gt;Purchasing Sidekiq Enterprise&lt;/a&gt; and
using &lt;code&gt;sidekiqswarm&lt;/code&gt; to reduce your dyno count may cover the entire
purchase price.  You get all the Sidekiq Pro and Enterprise features
effectively for free.  Each sale has a 14 day money back guarantee if
you want to try it today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proxying Golang Web Applications</title>
      <link>https://www.mikeperham.com/2019/07/17/proxying-golang-web-applications/</link>
      <pubDate>Wed, 17 Jul 2019 16:26:43 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/07/17/proxying-golang-web-applications/</guid>
      <description>

&lt;p&gt;Recently someone posted an issue asking if &lt;a href=&#34;https://contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; could support putting
&lt;code&gt;nginx&lt;/code&gt; in front of Faktory&#39;s Web UI.  Normally you access the Web UI
like &lt;code&gt;http://localhost:7420/&lt;/code&gt; but they wanted it to look something like
&lt;code&gt;http://somehost:8080/faktory&lt;/code&gt;.  That&#39;s quite common when trying to wrap
multiple systems into something that looks like one website to the
browser.&lt;/p&gt;

&lt;p&gt;The issue is that the Web UI assumed it was at the root, so
it hardcoded paths like &lt;code&gt;/static/application.css&lt;/code&gt;.  If you mount the Web
UI at &lt;code&gt;/faktory&lt;/code&gt;, you want that CSS URL to become
&lt;code&gt;/faktory/static/application.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After thirty minutes of Googling, I could find nothing on how to solve
this problem so I put on my thinking cap and ground it out over 3-4
hours today.  Here&#39;s the scoop.&lt;/p&gt;

&lt;h2 id=&#34;nginx-configuration&#34;&gt;nginx Configuration&lt;/h2&gt;

&lt;p&gt;Here&#39;s the nginx configuration to forward &lt;code&gt;/faktory&lt;/code&gt; to
Faktory at its default URL.  We set a number of headers which might be useful in the future
but only &lt;code&gt;X-Script-Name&lt;/code&gt; is critical. Note the &lt;code&gt;/faktory&lt;/code&gt; in the first two lines needs to
stay in sync.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /faktory {
  proxy_set_header X-Script-Name /faktory;

  proxy_pass   http://127.0.0.1:7420;
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Scheme $scheme;
  proxy_set_header X-Real-IP $remote_addr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SCRIPT_NAME&lt;/code&gt; is a legacy of CGI but it&#39;s used by Python and Ruby apps
to know the proxy prefix for requests coming to an app.  We use a properly
named HTTP header, X-Script-Name, in each request to signal this value to Faktory.&lt;/p&gt;

&lt;h2 id=&#34;abstract-that-mux&#34;&gt;Abstract that Mux!&lt;/h2&gt;

&lt;p&gt;Go&#39;s http package exposes a Mux type which acts as the router in a Go
webapp. We tell it to route all &lt;code&gt;/static/&lt;/code&gt; requests like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;staticHandler&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this has one very big problem: it doesn&#39;t know about the &lt;code&gt;/faktory&lt;/code&gt;
prefix!&lt;/p&gt;

&lt;p&gt;The trick I figured out is to add a special Mux &lt;em&gt;before&lt;/em&gt; the application
Mux which matches all requests and can unmangle any proxied requests so
they look like an unproxied request to the app Mux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;staticHandler&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Script-Name&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// this is super greasy, not sure it&amp;#39;s optimal but Works For Me™
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestURI&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Replace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestURI&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestURI&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;every-link-must-be-relative&#34;&gt;Every Link must be Relative&lt;/h2&gt;

&lt;p&gt;Within the HTML markup, I had to change every URL and path to use a
helper to generate the relative path with any necessary prefix.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fullpath&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;relpath&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Script-Name&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;relpath&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-erb&#34; data-lang=&#34;erb&#34;&gt;&amp;lt;link href=&amp;#34;&amp;lt;%= fullpath(req, &amp;#34;/static/application.css&amp;#34;) %&amp;gt;&amp;#34; ...&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;req.Header.Get&lt;/code&gt; returns &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; when there is no value set so the base case is handled smoothly.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;No rocket science here but it was interesting to find a non-trivial HTTP
edge case in Go without a blog post on the subject and very rewarding to
solve it myself. &lt;a href=&#34;https://github.com/contribsys/faktory/commit/92d88d33f3a820ad5cc2085b1b12c78b7e5b8ea7&#34;&gt;Here&#39;s the big commit that landed in Faktory to add
proxy support.&lt;/a&gt;  I hope this helps someone else!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leaving Twitter</title>
      <link>https://www.mikeperham.com/2019/07/11/leaving-twitter/</link>
      <pubDate>Thu, 11 Jul 2019 10:23:50 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/07/11/leaving-twitter/</guid>
      <description>&lt;p&gt;Some have already noticed but I&#39;ve been booted out of Twitter.&lt;/p&gt;

&lt;p&gt;&amp;quot;Why, Mike?&amp;quot;&lt;/p&gt;

&lt;p&gt;Because set my birth year to 2000 in my profile. I
didn&#39;t think it was anyone&#39;s business, including Twitter, what my age
was. Since I created the account in 2008, Twitter said I was too young
to use their service and immediately locked the account.&lt;/p&gt;

&lt;p&gt;Quite possibly the least cool way to get your account locked?&lt;/p&gt;

&lt;p&gt;Eleven years. Tens of thousands of tweets. 9,000+ followers. Daily
engagement. None of that mattered.&lt;/p&gt;

&lt;p&gt;Yep, I can write to them asking them to unlock my account but
I see this as the last straw.  Free, centralized social media services
will always care more about their advertisers and PR optics
than they care for their users. I don&#39;t want to use a service that continues to
allow Nazis under the guise of free speech.&lt;/p&gt;

&lt;p&gt;&amp;quot;What&#39;s next?&amp;quot;&lt;/p&gt;

&lt;p&gt;I&#39;ve moved over to Mastodon where I can pick an instance whose policies
I respect. &lt;a href=&#34;https://mastodon.xyz/@mperham&#34;&gt;I&#39;m here for now&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Faktory with JavaScript</title>
      <link>https://www.mikeperham.com/2019/01/16/using-faktory-with-javascript/</link>
      <pubDate>Wed, 16 Jan 2019 09:00:55 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/01/16/using-faktory-with-javascript/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; is my new polyglot background job system, allowing any programming
language to use background jobs.  I&#39;ve documented how to
use Faktory with Ruby and Go as I&#39;m an expert in both languages.
Today I wanted to step outside my comfort zone and try Faktory with a
language I barely know: JavaScript.  Let&#39;s see how easy it is for me, a noob,
to get JavaScript jobs running with Faktory!&lt;/p&gt;

&lt;p&gt;We need three pieces for any background job system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client pushes jobs to the server.&lt;/li&gt;
&lt;li&gt;The server (i.e. Faktory) manages the queues and jobs.&lt;/li&gt;
&lt;li&gt;The worker pulls jobs from the server and executes them.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;

&lt;p&gt;Most importantly, you&#39;ll need the &lt;code&gt;faktory&lt;/code&gt; server installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap contribsys/faktory
brew install faktory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On macOS, easy.
See &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Installation&#34;&gt;Installation&lt;/a&gt; if you are on Linux.&lt;/p&gt;

&lt;h2 id=&#34;javascript-setup&#34;&gt;JavaScript Setup&lt;/h2&gt;

&lt;p&gt;First thing I did was install Node with &lt;code&gt;brew install node&lt;/code&gt;, which got me Node 11.6.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install node
$ npm install faktory-worker
+ faktory-worker@2.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We install the &lt;code&gt;faktory-worker&lt;/code&gt; package, which is the JavaScript client/worker library
provided by &lt;a href=&#34;https://github.com/jbielick/faktory_worker_node&#34;&gt;jbielick/faktory_worker_node&lt;/a&gt;.
We&#39;ll use it to push and fetch jobs.&lt;/p&gt;

&lt;h2 id=&#34;client-script&#34;&gt;Client Script&lt;/h2&gt;

&lt;p&gt;We&#39;ll create a script to send a new job to Faktory every second.  Here we
create an &lt;code&gt;adder&lt;/code&gt; job with two random integers for arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;randInt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;faktory-worker&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createJob&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;job&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;randInt&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;randInt&lt;/span&gt;()).&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;jid&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createJob&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createJob&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;worker-script&#34;&gt;Worker Script&lt;/h2&gt;

&lt;p&gt;The worker is the long-running process which fetches jobs from Faktory and
executes them.  We register the set of job types we know about and then
wait for jobs from Faktory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;faktory-worker&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) =&amp;gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${a} + ${b} = ${a+b}&amp;#34;&lt;/span&gt;)
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;faktory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;work&lt;/span&gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;// send INT signal to shutdown gracefully
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Finally I created a &lt;code&gt;Procfile&lt;/code&gt; which runs all three parts and used
foreman to run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install foreman
$ cat Procfile
faktory: /usr/local/bin/faktory
client: /usr/local/bin/node ./fclient.js
worker: /usr/local/bin/node ./fworker.js
$ foreman start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ foreman start
12:37:31 faktory.1 | started with pid 40472
12:37:31 client.1  | started with pid 40473
12:37:31 worker.1  | started with pid 40474
12:37:31 faktory.1 | Faktory 0.9.4
12:37:31 faktory.1 | Copyright © 2019 Contributed Systems LLC
12:37:31 faktory.1 | Licensed under the GNU Public License 3.0
12:37:31 faktory.1 | I 2019-01-15T20:37:31.437Z Initializing redis storage at /Users/mikeperham/.faktory/db, socket /Users/mikeperham/.faktory/db/redis.sock
12:37:31 faktory.1 | I 2019-01-15T20:37:31.469Z Web server now listening at localhost:7420
12:37:31 faktory.1 | I 2019-01-15T20:37:31.469Z PID 40472 listening at localhost:7419, press Ctrl-C to stop
12:37:32 worker.1  | 754 + 43 = 797
12:37:33 worker.1  | 841 + 51 = 892
12:37:34 worker.1  | 706 + 756 = 1462
12:37:35 worker.1  | 187 + 343 = 530
12:37:36 worker.1  | 690 + 587 = 1277
12:37:37 worker.1  | 368 + 168 = 536
12:37:38 worker.1  | 152 + 900 = 1052
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!
We are creating a job in our JavaScript client process, sending it to Faktory which distributes it to our Node worker process.
Our JavaScript client could be an Express web application or anything else.
In this way you can scale your job processing across many, many machines and workers.&lt;/p&gt;

&lt;p&gt;Now while it is running, open your browser to &lt;a href=&#34;http://localhost:7420&#34;&gt;http://localhost:7420&lt;/a&gt;
and check out the nice dashboard as your jobs process.
With the dashboard you can see jobs which have recently failed and are awaiting retry.
Got a bug in your code?
The worker will catch the exception and report the failure to Faktory so it can retry the job later.&lt;/p&gt;

&lt;p&gt;If you&#39;re a JavaScript developer, I hope this piques your curiousity to try Faktory.
Remember Faktory&#39;s advantage is that you can push and pull jobs with any programming language.
Want to create jobs in Ruby or PHP and process them in JavaScript?
No problem!
Check out all the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Related-Projects#language-bindings&#34;&gt;different languages supported&lt;/a&gt; today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Faktory with Python</title>
      <link>https://www.mikeperham.com/2019/01/08/using-faktory-with-python/</link>
      <pubDate>Tue, 08 Jan 2019 10:03:54 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2019/01/08/using-faktory-with-python/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; is my new polyglot background job system, allowing any programming
language to use background jobs.  I&#39;ve documented how to
use Faktory with Ruby and Go as I&#39;m an expert in both languages.
Today I wanted to step outside my comfort zone and try Faktory with a
language I don&#39;t know: Python.  Let&#39;s see how easy it is for me, a noob,
to get Python jobs running with Faktory!&lt;/p&gt;

&lt;p&gt;We need three pieces for any background job system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client pushes jobs to the server.&lt;/li&gt;
&lt;li&gt;The server (i.e. Faktory) manages the queues and jobs.&lt;/li&gt;
&lt;li&gt;The worker pulls jobs from the server and executes them.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;

&lt;p&gt;Most importantly, you&#39;ll need the &lt;code&gt;faktory&lt;/code&gt; server installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap contribsys/faktory
brew install faktory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On macOS, easy.
See &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Installation&#34;&gt;Installation&lt;/a&gt; if you are on Linux.&lt;/p&gt;

&lt;h2 id=&#34;python-setup&#34;&gt;Python Setup&lt;/h2&gt;

&lt;p&gt;First thing I did was install a modern Python with &lt;code&gt;brew install
python&lt;/code&gt;, which got me Python 3.7.2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install python
$ pip install faktory
Successfully installed faktory-0.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We install the &lt;code&gt;faktory&lt;/code&gt; package, which is the Python client/worker library
provided by &lt;a href=&#34;https://github.com/cdrx/faktory_worker_python&#34;&gt;cdrx/faktory_worker_python&lt;/a&gt;.
We&#39;ll use it to push and fetch jobs.&lt;/p&gt;

&lt;h2 id=&#34;client-script&#34;&gt;Client Script&lt;/h2&gt;

&lt;p&gt;We&#39;ll create a very simple script to create a job every second.  Here we
create an &lt;code&gt;adder&lt;/code&gt; job with two random integers for arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fclient.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; faktory
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time

time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; faktory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; client:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;), random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)))
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;worker-script&#34;&gt;Worker Script&lt;/h2&gt;

&lt;p&gt;The worker is the long-running process which fetches jobs from Faktory and
executes them.  We register the set of job types we know about and then
wait for jobs from Faktory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fworker.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; faktory &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Worker
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;INFO)

time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;adder&lt;/span&gt;(x, y):
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, x, y, x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y)

w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Worker(queues&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;], concurrency&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;register(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;adder&amp;#39;&lt;/span&gt;, adder)
w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Finally I created a &lt;code&gt;Procfile&lt;/code&gt; which runs all three parts and used
foreman to run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install foreman
$ cat Procfile
faktory: /usr/local/bin/faktory
client: /usr/local/bin/python3.7 ./fclient.py
worker: /usr/local/bin/python3.7 ./fworker.py
$ foreman start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ foreman start
10:37:21 faktory.1 | started with pid 7319
10:37:21 client.1  | started with pid 7320
10:37:21 worker.1  | started with pid 7321
10:37:21 faktory.1 | Faktory 0.9.3
10:37:21 faktory.1 | Copyright © 2019 Contributed Systems LLC
10:37:21 faktory.1 | Licensed under the GNU Public License 3.0
10:37:21 faktory.1 | I 2019-01-02T18:37:21.055Z Initializing redis storage at /Users/mikeperham/.faktory/db, socket /Users/mikeperham/.faktory/db/redis.sock
10:37:21 faktory.1 | I 2019-01-02T18:37:21.084Z Web server now listening at localhost:7420
10:37:21 faktory.1 | I 2019-01-02T18:37:21.084Z PID 7319 listening at localhost:7419, press Ctrl-C to stop
10:37:22 worker.1  | INFO:faktory.worker:Registered task: adder
10:37:22 worker.1  | INFO:faktory.connection:Connecting to localhost:7419
10:37:22 worker.1  | INFO:faktory.worker:Queues: default
10:37:22 worker.1  | INFO:faktory.worker:Labels: python
10:37:22 worker.1  | INFO:root:943 + 720 = 1663
10:37:23 worker.1  | INFO:root:131 + 259 = 390
10:37:24 worker.1  | INFO:root:272 + 304 = 576
10:37:25 faktory.1 | I 2019-01-02T18:37:25.090Z Retries processed 2 jobs
10:37:25 worker.1  | INFO:root:418 + 86 = 504
10:37:26 worker.1  | INFO:root:818 + 56 = 874
10:37:27 worker.1  | INFO:root:619 + 237 = 856
10:37:28 worker.1  | INFO:root:926 + 93 = 1019
10:37:29 worker.1  | INFO:root:481 + 812 = 1293
10:37:30 worker.1  | INFO:root:391 + 224 = 615
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!
We are creating a job in our Python client process, sending it to Faktory which distributes it to our Python worker process.
Our Python client could be a Django application or anything else.
In this way you can scale your job processing across many, many machines and workers.&lt;/p&gt;

&lt;p&gt;Now while it is running, open your browser to &lt;a href=&#34;http://localhost:7420&#34;&gt;http://localhost:7420&lt;/a&gt;
and check out the nice dashboard as your jobs process.
With the dashboard you can see jobs which have recently failed and are awaiting retry.
Got a bug in your code?
The worker will catch the exception and report the failure to Faktory so it can retry the job later.&lt;/p&gt;

&lt;p&gt;If you&#39;re a Python developer, I hope this piques your curiousity to try Faktory.
Remember Faktory&#39;s advantage is that you can push and pull jobs with any programming language.
Want to create jobs in PHP and process them in Python?
No problem!
Check out all the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Related-Projects#language-bindings&#34;&gt;different languages supported&lt;/a&gt; today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Faktory Pro</title>
      <link>https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/</link>
      <pubDate>Sat, 01 Dec 2018 10:13:45 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/</guid>
      <description>

&lt;p&gt;I&#39;m happy to announce Faktory Pro, my commercial version of &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt;, is now available for purchase.
Faktory is my next generation background job system which brings Sidekiq functionality to &lt;strong&gt;all programming languages&lt;/strong&gt;.
If you want background jobs in Python, JavaScript, PHP, Go, Ruby, or Rust, Faktory can work with them all!
It gives you a standard job interface and conventions useful for all languages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-ui.png&#34; alt=&#34;faktory ui&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-jobs&#34;&gt;Why Jobs?&lt;/h2&gt;

&lt;p&gt;I believe background jobs are the best architectural pattern for scaling typical
business apps to many machines.  Sidekiq has been enormously successful
because it implements that pattern and adds opinionated conventions
which make the average developer&#39;s life much easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A standard mechanism for implementing and creating a unit of work&lt;/li&gt;
&lt;li&gt;A standard process for error handling with automatic retries and backoff&lt;/li&gt;
&lt;li&gt;&amp;quot;All-in-one&amp;quot; packaging so the base package includes everything necessary: client API, worker process, management APIs, and a beautiful Web UI translated to 25 languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to build and maintain your own low-level infrastructure, Faktory is not
for you. If you want to build and scale a traditional business app as quickly and
painlessly as possible, Faktory is designed for you.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;This initial launch includes these features but &lt;strong&gt;the Pro feature list here will grow over time&lt;/strong&gt;.
Notably I will implement as many of the &lt;a href=&#34;https://sidekiq.org&#34;&gt;commercial Sidekiq features&lt;/a&gt; as possible.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Cron&#34;&gt;Cron jobs&lt;/a&gt; - kick off jobs on a regular schedule.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Redis-Gateway&#34;&gt;Redis Gateway&lt;/a&gt; - expose Redis to the network so you can take backups, set up a replica, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Pro-Expiring-Jobs&#34;&gt;Expiring jobs&lt;/a&gt; - configure jobs to expire if they have not successfully processed within some time interval&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Future features might include metrics, batches, unique jobs, encryption, Web UI search, etc.
Faktory&#39;s different architecture means some features aren&#39;t possible but enables others that Sidekiq couldn&#39;t do well, like queue throttling.
I&#39;m excited to see what new things are possible!&lt;/p&gt;

&lt;h2 id=&#34;how-to-try-it&#34;&gt;How to Try It&lt;/h2&gt;

&lt;p&gt;There is a macOS binary of Faktory Pro available for free trial on your
local laptop on the &lt;a href=&#34;https://github.com/contribsys/faktory/releases&#34;&gt;Faktory releases&lt;/a&gt; page.
Additionally each sale comes with a 14 day trial period -- you won&#39;t be charged for two weeks.&lt;/p&gt;

&lt;h2 id=&#34;pricing&#34;&gt;Pricing&lt;/h2&gt;

&lt;p&gt;Faktory Pro is a server you run and is priced &lt;em&gt;per production instance&lt;/em&gt; at $149/mo for the first server and $49/mo for each additional server.
Each Faktory Pro server can handle thousands of jobs per second under
normal conditions.
Testing, staging and development instances are unlimited and free.
For the price of one consultant-hour per month, you get a well-maintained and well-supported feature-rich job system.&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;&lt;a href=&#34;https://billing.contribsys.com/fpro/new.cgi&#34;&gt;buy Faktory Pro&lt;/a&gt;&lt;/strong&gt; right here.
Got questions?
Check out the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki&#34;&gt;wiki documentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/contribsys/faktory/issues/new&#34;&gt;open an issue&lt;/a&gt; or &lt;a href=&#34;https://gitter.im/contribsys/faktory/&#34;&gt;jump into the chatroom&lt;/a&gt; and say hi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faktory 0.9.0 - Hello, Redis!</title>
      <link>https://www.mikeperham.com/2018/10/16/faktory-0.9.0-hello-redis/</link>
      <pubDate>Tue, 16 Oct 2018 09:26:18 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/16/faktory-0.9.0-hello-redis/</guid>
      <description>

&lt;p&gt;Faktory is my new background job system which brings Sidekiq-like background jobs to all languages.
Want Sidekiq in PHP? Python? JavaScript? You got it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-ui.png&#34; alt=&#34;faktory ui&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Faktory 0.9 has just been released with a major architectural overhaul.
I&#39;ve replaced the previous storage engine, RocksDB, with Redis.
This change had hugely important, very good downstream effects!&lt;/p&gt;

&lt;p&gt;Want to try Faktory?  &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/&#34;&gt;The wiki has everything you need&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;why-redis&#34;&gt;Why Redis?&lt;/h2&gt;

&lt;p&gt;So why did I replace RocksDB?
RocksDB has two advantages over Redis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is very fast&lt;/li&gt;
&lt;li&gt;it is embeddable (which means it links into your process and provides an API your code calls directly).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is that &lt;strong&gt;everything else&lt;/strong&gt; is a disadvantage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has dozens of barely documented options&lt;/li&gt;
&lt;li&gt;It&#39;s written in C++, meaning a much more complex build process to embed it into a Go process&lt;/li&gt;
&lt;li&gt;It has virtually no usage outside of large corporate silos (e.g. Facebook,
Yahoo, Pinterest) where internal developers can learn and maintain it.&lt;/li&gt;
&lt;li&gt;Its API is key/value only, very low-level, with no higher-level structures supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redis, on the other hand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;has lots of great documentation.&lt;/li&gt;
&lt;li&gt;used everywhere, by everyone.&lt;/li&gt;
&lt;li&gt;has lots of commercial support and offerings.&lt;/li&gt;
&lt;li&gt;has a broad, stable, high-level API&lt;/li&gt;
&lt;li&gt;is not much slower, only 10-20%.  It&#39;ll still handle 1000s of jobs/sec.&lt;/li&gt;
&lt;li&gt;and lastly, I have years of experience supporting it in production!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now instead of a directory full of obscure files, we have a single
&lt;code&gt;faktory.rdb&lt;/code&gt; file with all data.  Now we can use &lt;code&gt;redis-cli&lt;/code&gt; and RDB
tools to introspect the datastore, monitor commands in real-time, use
existing Redis monitoring integrations to monitor Faktory&#39;s storage.
&lt;strong&gt;When we build on the shoulders of giants, the view is pretty good.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only issue I had to solve is how to &amp;quot;embed&amp;quot; Redis?  I can&#39;t link it
into the process directly so instead I updated Faktory to start Redis as
a child process and maintain a named socket to it.  By keeping it local,
using a named socket, we ensure our usage of Redis is both high
performance and secure (since Redis does not listen on the network).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.mikeperham.com/images/faktory-logo.png&#34; alt=&#34;faktory logo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-upcoming&#34;&gt;What&#39;s Upcoming?&lt;/h2&gt;

&lt;p&gt;With 0.9 out, I&#39;m very close to releasing Faktory Pro, my first commercially supported version of Faktory!
The initial feature list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cron jobs - enqueue jobs on a periodic schedule&lt;/li&gt;
&lt;li&gt;Expiring jobs - throw away jobs which have passed a given expiration date&lt;/li&gt;
&lt;li&gt;Redis Gateway - expose Redis on a TCP port so you can attach a replica to it for real-time replication&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This feature list is very likely to grow over time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/&#34;&gt;See the Faktory wiki for how to install and lots of documentation&lt;/a&gt;.
Join us in &lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;the chatroom&lt;/a&gt; or &lt;a href=&#34;https://github.com/contribsys/faktory/issues/&#34;&gt;open an issue&lt;/a&gt; if you have questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Ruby&#39;s CGI</title>
      <link>https://www.mikeperham.com/2018/10/12/testing-rubys-cgi/</link>
      <pubDate>Fri, 12 Oct 2018 08:59:06 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/12/testing-rubys-cgi/</guid>
      <description>

&lt;p&gt;CGI is a standard for generating HTML pages from scripts executed as
child processes by a web server. I explained CGI and how I use it in a
previous post, &lt;a href=&#34;https://www.mikeperham.com/2015/01/05/cgi-rubys-bare-metal/&#34;&gt;CGI: Ruby&#39;s Bare Metal&lt;/a&gt;.
I like to use CGI because it means that I don&#39;t have to run any Ruby app
server (e.g. puma, passenger, unicorn) 24/7.  Less moving parts == more
robust!&lt;/p&gt;

&lt;p&gt;Those app servers get most of the press these days so sadly CGI doesn&#39;t
have much support and documentation; I couldn&#39;t find anything on how to &lt;strong&gt;test&lt;/strong&gt; CGI scripts.
These scripts handle my business, they need to work so I decided to put some effort into testing CGI.
You, dear reader, are the benefactor!&lt;/p&gt;

&lt;p&gt;Two things I learned:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Webrick, Ruby&#39;s built-in HTTP server, does have support for calling CGI scripts.
This will be critical for us, it means we don&#39;t have to install Apache or nginx to call the CGI scripts.&lt;/li&gt;
&lt;li&gt;Because CGI outputs raw HTML, we&#39;ll need to do browser-level testing
using Capybara with headless chrome or another automated browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Great! Our test suite will be a Ruby process with two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Webrick serving CGI requests&lt;/li&gt;
&lt;li&gt;Capybara requesting URLs from Webrick&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How can a Ruby process do two things at once?  With Threads, of course!&lt;/p&gt;

&lt;h2 id=&#34;webrick&#34;&gt;Webrick&lt;/h2&gt;

&lt;p&gt;Webrick is set up out of the box to serve any &lt;code&gt;.cgi&lt;/code&gt; files as Ruby CGI scripts.
You point Webrick to your &lt;code&gt;DocumentRoot&lt;/code&gt; as normal.  Note that since
Capybara is going to be driving the tests, we need Webrick to execute in
another thread so both the HTTP client and server can execute
concurrently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WEBRICK&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webrick&amp;#39;&lt;/span&gt;

  server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WEBrick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTPServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
    &lt;span style=&#34;color:#e6db74&#34;&gt;:Port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8999&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;:DocumentRoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../..&amp;#34;&lt;/span&gt;, __FILE__),
  )
  trap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INT&amp;#39;&lt;/span&gt;) { server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shutdown }

  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting Webrick on port 8999&amp;#34;&lt;/span&gt;
  server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;capybara&#34;&gt;Capybara&lt;/h2&gt;

&lt;p&gt;Most of the Capybara integration is straight out of the README, there is
only one trick necessary: since we are starting our own custom Webrick
server in a separate thread, we need to tell Capybara not to start a
server on its own and point it to ours instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;app_host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:8999&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After an hour of fiddling, here&#39;s the &lt;code&gt;test/helper.rb&lt;/code&gt; I came up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;report_on_exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capybara/minitest&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# I found poltergeist quick to install and worked first time, YMMV&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capybara/poltergeist&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;javascript_driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:poltergeist&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CGITest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Minitest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DSL&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Minitest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Assertions&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;javascript_driver
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;teardown&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_sessions!
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use_default_driver
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# Here&amp;#39;s the trick:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# We need to run the Webrick server in a separate thread so the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# testcases can make requests and block, waiting for the response.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WEBRICK&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webrick&amp;#39;&lt;/span&gt;

  server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WEBrick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTPServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
    &lt;span style=&#34;color:#e6db74&#34;&gt;:Port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8999&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;:DocumentRoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../..&amp;#34;&lt;/span&gt;, __FILE__),
  )
  trap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INT&amp;#39;&lt;/span&gt;) { server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shutdown }

  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting Webrick on port 8999&amp;#34;&lt;/span&gt;
  server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Point Capybara to Webrick!&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;app_host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://localhost:8999&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# give webrick time to boot before the tests can run&lt;/span&gt;
sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I create &lt;code&gt;test/smoke_test.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require_relative &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./helper&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SmokeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CGITest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_pro_navigation&lt;/span&gt;
    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/new.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subscribe to&amp;#39;&lt;/span&gt;)

    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/update.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Update your&amp;#39;&lt;/span&gt;)

    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/cancel.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cancel your&amp;#39;&lt;/span&gt;)

    visit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/spro/delete.cgi&amp;#34;&lt;/span&gt;)
    assert page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_content?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Confirm your&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&#39;s a quick test to make sure the &lt;a href=&#34;https://billing.contribsys.com/spro/&#34;&gt;billing scripts for Sidekiq
Pro&lt;/a&gt; will render correctly and not crash.
Now with a little test coverage I&#39;ve got more confidence that changes won&#39;t break these scripts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Linux Packages and using Github Releases</title>
      <link>https://www.mikeperham.com/2018/10/10/building-linux-packages-and-using-github-releases/</link>
      <pubDate>Wed, 10 Oct 2018 13:31:27 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/10/10/building-linux-packages-and-using-github-releases/</guid>
      <description>

&lt;p&gt;I&#39;m preparing to launch &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; 0.9, a major overhaul to switch
from RocksDB to Redis as the storage engine.
The improvement in the development process is amazing.
But I need to finalize how I distribute Faktory releases.  According to
a poll I ran, 58% of people want a deb, 32% want a Docker image, 7% want an rpm and 3% are Linux hipsters that lovingly craft each network packet by hand.&lt;/p&gt;

&lt;h2 id=&#34;building-packages&#34;&gt;Building Packages&lt;/h2&gt;

&lt;p&gt;By removing RocksDB, a C++ dependency, we moved from a cgo build to a pure Go build.
The advantages of a pure Go build process are hard to overstate:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I can cross-compile Linux binaries on OSX&lt;/li&gt;
&lt;li&gt;Since it doesn&#39;t use glibc and libcpp, I don&#39;t need to build distro-specific binaries&lt;/li&gt;
&lt;li&gt;I don&#39;t need to use Vagrant or Docker to run Linux in order to build packages&lt;/li&gt;
&lt;li&gt;I could narrow the package formats to only two, deb and rpm, and really I could get away with one.
DEB appears to have won the popularity contest and Debian distros seem to be the strong majority among my followers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these changes, Faktory&#39;s package build went from an hour of manually running various scripts to &lt;strong&gt;four seconds&lt;/strong&gt;.
That&#39;s four seconds for a &lt;strong&gt;full build&lt;/strong&gt;: cleaning, generating, cross compiling and building the deb/rpm files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ time make package
go generate github.com/contribsys/faktory/webui
Created package {:path=&amp;gt;&amp;quot;packaging/output/systemd/faktory_0.9.0-beta3_amd64.deb&amp;quot;}
Created package {:path=&amp;gt;&amp;quot;packaging/output/systemd/faktory-0.9.0-beta3.x86_64.rpm&amp;quot;}

real	0m4.218s
user	0m3.529s
sys	0m0.833s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are only two requirements for these packages: 64-bit Linux and systemd.
No business is running 32-bit anymore for anything but edge case reasons.
systemd has been the Ubuntu default for ~4 years now so I&#39;m ok with that for now.&lt;/p&gt;

&lt;p&gt;The unsung hero in all of this build process is &lt;a href=&#34;https://github.com/jordansissel/fpm/&#34;&gt;the &lt;code&gt;fpm&lt;/code&gt; gem&lt;/a&gt;.
Jordan Sissel deserves our eternal praise for his work in making it easy to build Linux packages anywhere.
If I could license &amp;quot;FPM Pro&amp;quot; to pay him for his work, I would in a heartbeat.
In the meantime, my public thanks will have to be enough.&lt;/p&gt;

&lt;h2 id=&#34;using-github-releases&#34;&gt;Using GitHub Releases&lt;/h2&gt;

&lt;p&gt;Now that I can build these &amp;quot;universal&amp;quot; packages, how do I distribute them?
apt/yum repos are notoriously painful to setup and run.
Easiest quick solution that I know of is to use GitHub releases:
tag the code, generate the packages and then create a release.
Here&#39;s how I create a Faktory release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; clean test package tag
  @echo Generating release notes
  ruby .github/notes.rb &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  @echo Releasing faktory &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  hub release create v&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -a packaging/output/systemd/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;_&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;_amd64.deb &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -a packaging/output/systemd/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;VERSION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ITERATION&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.x86_64.rpm &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -F /tmp/release-notes.md -e -o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the Ruby script to generate the release notes automatically,
including changelog link and SHA256 sums for each file.
&lt;code&gt;brew install hub&lt;/code&gt; to get GitHub&#39;s handy CLI tool.&lt;/p&gt;

&lt;p&gt;To install that DEB:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -LO https://github.com/contribsys/faktory/releases/download/v0.9.0-beta3/faktory_0.9.0-beta3_amd64.deb
dpkg -i faktory_0.9.0-beta3_amd64.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;GitHub Releases work well enough for now.
They don&#39;t have the benefit of a full-blown package repo but they provide a stable download link for binaries and are far simpler to setup and use from my POV.
In reality, I would imagine most teams will fetch and install the package via Puppet/Chef/Ansible.
Hopefully as Faktory gets more popular, it will make its way into the official distro repos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving to Mastodon</title>
      <link>https://www.mikeperham.com/2018/09/21/moving-to-mastodon/</link>
      <pubDate>Fri, 21 Sep 2018 09:37:21 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/09/21/moving-to-mastodon/</guid>
      <description>&lt;p&gt;Last month I revived &lt;a href=&#34;https://mastodon.xyz/@mperham&#34;&gt;my Mastodon account&lt;/a&gt; after seeing one more round of
Twitter giving Nazi accounts acting in bad faith a pass while suspending
upset liberal accounts acting in good faith.&lt;/p&gt;

&lt;p&gt;I think this concept of acting in good faith vs bad faith is the crux of
the issue in social media today.  Is this person trying to make things
better or are they delaying action, spreading confusion
or uncertainty, harassing others into silence?  Often it is easy to tell
in the case of red-blooded USA patriot accounts with IP addresses in St.
Petersburg or anonymous anime fans who make it clear that they hate women.&lt;/p&gt;

&lt;p&gt;But often it&#39;s not clear at all.
People acting in good faith can still inadvertantly spread FUD and good
faith itself is not black/white.
In the end, tech can&#39;t solve a social problem.  There&#39;s no algorithm that can
correctly classify the sentiment of a 280 character message.&lt;/p&gt;

&lt;p&gt;Until social networks
demonstrate they can block bad actors at scale, federation is the only workable
solution.  Mastodon instance admins can document and enforce a Code of
Conduct and other admins can block/ban users or instances which violate their
Code.  Already there are blocklists for Mastodon instances which have
been deemed bad actors for one reason or another.&lt;/p&gt;

&lt;p&gt;It&#39;s not perfect and perhaps it won&#39;t scale very far but it does appear
to have enough traction to work today. Niche-specific instances like
&lt;a href=&#34;https://ruby.social&#34;&gt;https://ruby.social&lt;/a&gt; for Ruby developers make for nice, small communities and
small communities tend to treat each other with more respect than larger
ones.  &lt;a href=&#34;https://instances.social/&#34;&gt;Find your own community&lt;/a&gt; and wean yourself off Twitter today!&lt;/p&gt;

&lt;p&gt;Mastodon looks pretty similar to Twitter:&lt;/p&gt;







&lt;iframe src= &#34;https://mastodon.xyz/@mperham/100743659488287177/embed&#34; class=&#34;mastodon-embed&#34; style=&#34;max-width: 100%; border: 0&#34; width=&#34;600&#34; height=&#34;230&#34;&gt;&lt;/iframe&gt;



&lt;p&gt;I&#39;m at &lt;a href=&#34;https://mastodon.xyz/@mperham&#34;&gt;https://mastodon.xyz/@mperham&lt;/a&gt;
and Sidekiq is hanging out with all the Rubyists at &lt;a href=&#34;https://ruby.social/@sidekiq&#34;&gt;https://ruby.social/@sidekiq&lt;/a&gt;.  I hope you give Mastodon a try.&lt;/p&gt;







&lt;iframe src= &#34;https://ruby.social/@sidekiq/100605401147582858/embed&#34; class=&#34;mastodon-embed&#34; style=&#34;max-width: 100%; border: 0&#34; width=&#34;600&#34; height=&#34;400&#34;&gt;&lt;/iframe&gt;


</description>
    </item>
    
  </channel>
</rss>
